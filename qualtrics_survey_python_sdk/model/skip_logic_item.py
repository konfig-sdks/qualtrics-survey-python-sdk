# coding: utf-8

"""
    Qualtrics Survey API

    The Qualtrics Survey endpoints give you access to the structure of the surveys you create.   Surveys have a complex structure, and you are encouraged to become familiar with the structure using your brand's Qualtrics page to build surveys at first. Then you can query those surveys using these endpoints.   Once you are familiar, you can use this API to create surveys on the fly, or modify existing surveys in your library. 

    The version of the OpenAPI document: 3.0.0
    Created by: https://www.qualtrics.com/support/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from qualtrics_survey_python_sdk import schemas  # noqa: F401


class SkipLogicItem(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "Condition",
            "ChoiceLocator",
            "QuestionID",
        }
        
        class properties:
        
            @staticmethod
            def ChoiceLocator() -> typing.Type['Locator']:
                return Locator
            
            
            class Condition(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "Selected": "SELECTED",
                        "NotSelected": "NOT_SELECTED",
                        "Displayed": "DISPLAYED",
                        "NotDisplayed": "NOT_DISPLAYED",
                        "GreaterThan": "GREATER_THAN",
                        "LessThan": "LESS_THAN",
                        "GreaterThanOrEqual": "GREATER_THAN_OR_EQUAL",
                        "LessThanOrEqual": "LESS_THAN_OR_EQUAL",
                        "EqualTo": "EQUAL_TO",
                        "NotEqualTo": "NOT_EQUAL_TO",
                        "Empty": "EMPTY",
                        "NotEmpty": "NOT_EMPTY",
                        "ClickedIn": "CLICKED_IN",
                        "NotClickedIn": "NOT_CLICKED_IN",
                        "Uploaded": "UPLOADED",
                        "NotUploaded": "NOT_UPLOADED",
                        "Contains": "CONTAINS",
                        "DoesNotContain": "DOES_NOT_CONTAIN",
                        "MatchesRegex": "MATCHES_REGEX",
                    }
                
                @schemas.classproperty
                def SELECTED(cls):
                    return cls("Selected")
                
                @schemas.classproperty
                def NOT_SELECTED(cls):
                    return cls("NotSelected")
                
                @schemas.classproperty
                def DISPLAYED(cls):
                    return cls("Displayed")
                
                @schemas.classproperty
                def NOT_DISPLAYED(cls):
                    return cls("NotDisplayed")
                
                @schemas.classproperty
                def GREATER_THAN(cls):
                    return cls("GreaterThan")
                
                @schemas.classproperty
                def LESS_THAN(cls):
                    return cls("LessThan")
                
                @schemas.classproperty
                def GREATER_THAN_OR_EQUAL(cls):
                    return cls("GreaterThanOrEqual")
                
                @schemas.classproperty
                def LESS_THAN_OR_EQUAL(cls):
                    return cls("LessThanOrEqual")
                
                @schemas.classproperty
                def EQUAL_TO(cls):
                    return cls("EqualTo")
                
                @schemas.classproperty
                def NOT_EQUAL_TO(cls):
                    return cls("NotEqualTo")
                
                @schemas.classproperty
                def EMPTY(cls):
                    return cls("Empty")
                
                @schemas.classproperty
                def NOT_EMPTY(cls):
                    return cls("NotEmpty")
                
                @schemas.classproperty
                def CLICKED_IN(cls):
                    return cls("ClickedIn")
                
                @schemas.classproperty
                def NOT_CLICKED_IN(cls):
                    return cls("NotClickedIn")
                
                @schemas.classproperty
                def UPLOADED(cls):
                    return cls("Uploaded")
                
                @schemas.classproperty
                def NOT_UPLOADED(cls):
                    return cls("NotUploaded")
                
                @schemas.classproperty
                def CONTAINS(cls):
                    return cls("Contains")
                
                @schemas.classproperty
                def DOES_NOT_CONTAIN(cls):
                    return cls("DoesNotContain")
                
                @schemas.classproperty
                def MATCHES_REGEX(cls):
                    return cls("MatchesRegex")
        
            @staticmethod
            def QuestionID() -> typing.Type['QuestionID']:
                return QuestionID
            
            
            class SkipLogicID(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    regex=[{
                        'pattern': r'[0-9]{1,3}',
                    }]
            
            
            class ChoiceID(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    regex=[{
                        'pattern': r'[0-9]{1,3}',
                    }]
            Description = schemas.StrSchema
        
            @staticmethod
            def Locator() -> typing.Type['Locator']:
                return Locator
            SkipToDescription = schemas.StrSchema
            
            
            class SkipToDestination(
                schemas.ComposedSchema,
            ):
            
            
                class MetaOapg:
                    
                    
                    class one_of_0(
                        schemas.EnumBase,
                        schemas.StrSchema
                    ):
                    
                    
                        class MetaOapg:
                            enum_value_to_name = {
                                "ENDOFBLOCK": "ENDOFBLOCK",
                                "ENDOFSURVEY": "ENDOFSURVEY",
                            }
                        
                        @schemas.classproperty
                        def ENDOFBLOCK(cls):
                            return cls("ENDOFBLOCK")
                        
                        @schemas.classproperty
                        def ENDOFSURVEY(cls):
                            return cls("ENDOFSURVEY")
                    
                    @classmethod
                    @functools.lru_cache()
                    def one_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            cls.one_of_0,
                            SurveyID,
                        ]
            
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'SkipToDestination':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "ChoiceLocator": ChoiceLocator,
                "Condition": Condition,
                "QuestionID": QuestionID,
                "SkipLogicID": SkipLogicID,
                "ChoiceID": ChoiceID,
                "Description": Description,
                "Locator": Locator,
                "SkipToDescription": SkipToDescription,
                "SkipToDestination": SkipToDestination,
            }
        additional_properties = schemas.AnyTypeSchema
    
    Condition: MetaOapg.properties.Condition
    ChoiceLocator: 'Locator'
    QuestionID: 'QuestionID'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Condition"]) -> MetaOapg.properties.Condition: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ChoiceLocator"]) -> 'Locator': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["QuestionID"]) -> 'QuestionID': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["SkipLogicID"]) -> MetaOapg.properties.SkipLogicID: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ChoiceID"]) -> MetaOapg.properties.ChoiceID: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Description"]) -> MetaOapg.properties.Description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Locator"]) -> 'Locator': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["SkipToDescription"]) -> MetaOapg.properties.SkipToDescription: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["SkipToDestination"]) -> MetaOapg.properties.SkipToDestination: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["Condition"], typing_extensions.Literal["ChoiceLocator"], typing_extensions.Literal["QuestionID"], typing_extensions.Literal["SkipLogicID"], typing_extensions.Literal["ChoiceID"], typing_extensions.Literal["Description"], typing_extensions.Literal["Locator"], typing_extensions.Literal["SkipToDescription"], typing_extensions.Literal["SkipToDestination"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Condition"]) -> MetaOapg.properties.Condition: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ChoiceLocator"]) -> 'Locator': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["QuestionID"]) -> 'QuestionID': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["SkipLogicID"]) -> typing.Union[MetaOapg.properties.SkipLogicID, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ChoiceID"]) -> typing.Union[MetaOapg.properties.ChoiceID, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Description"]) -> typing.Union[MetaOapg.properties.Description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Locator"]) -> typing.Union['Locator', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["SkipToDescription"]) -> typing.Union[MetaOapg.properties.SkipToDescription, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["SkipToDestination"]) -> typing.Union[MetaOapg.properties.SkipToDestination, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["Condition"], typing_extensions.Literal["ChoiceLocator"], typing_extensions.Literal["QuestionID"], typing_extensions.Literal["SkipLogicID"], typing_extensions.Literal["ChoiceID"], typing_extensions.Literal["Description"], typing_extensions.Literal["Locator"], typing_extensions.Literal["SkipToDescription"], typing_extensions.Literal["SkipToDestination"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        Condition: typing.Union[MetaOapg.properties.Condition, str, ],
        ChoiceLocator: 'Locator',
        QuestionID: 'QuestionID',
        SkipLogicID: typing.Union[MetaOapg.properties.SkipLogicID, str, schemas.Unset] = schemas.unset,
        ChoiceID: typing.Union[MetaOapg.properties.ChoiceID, str, schemas.Unset] = schemas.unset,
        Description: typing.Union[MetaOapg.properties.Description, str, schemas.Unset] = schemas.unset,
        Locator: typing.Union['Locator', schemas.Unset] = schemas.unset,
        SkipToDescription: typing.Union[MetaOapg.properties.SkipToDescription, str, schemas.Unset] = schemas.unset,
        SkipToDestination: typing.Union[MetaOapg.properties.SkipToDestination, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'SkipLogicItem':
        return super().__new__(
            cls,
            *args,
            Condition=Condition,
            ChoiceLocator=ChoiceLocator,
            QuestionID=QuestionID,
            SkipLogicID=SkipLogicID,
            ChoiceID=ChoiceID,
            Description=Description,
            Locator=Locator,
            SkipToDescription=SkipToDescription,
            SkipToDestination=SkipToDestination,
            _configuration=_configuration,
            **kwargs,
        )

from qualtrics_survey_python_sdk.model.locator import Locator
from qualtrics_survey_python_sdk.model.question_id import QuestionID
from qualtrics_survey_python_sdk.model.survey_id import SurveyID
