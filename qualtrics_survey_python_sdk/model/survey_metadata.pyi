# coding: utf-8

"""
    Qualtrics Survey API

    The Qualtrics Survey endpoints give you access to the structure of the surveys you create.   Surveys have a complex structure, and you are encouraged to become familiar with the structure using your brand's Qualtrics page to build surveys at first. Then you can query those surveys using these endpoints.   Once you are familiar, you can use this API to create surveys on the fly, or modify existing surveys in your library. 

    The version of the OpenAPI document: 3.0.0
    Created by: https://www.qualtrics.com/support/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from qualtrics_survey_python_sdk import schemas  # noqa: F401


class SurveyMetadata(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "LastActivated",
            "SurveyID",
            "CreatorID",
            "SurveyActiveResponseSet",
            "SurveyCreationDate",
            "SurveyName",
            "DivisionID",
            "LastModified",
            "SurveyBrandID",
            "SurveyExpirationDate",
            "SurveyOwnerID",
            "SurveyStatus",
            "LastAccessed",
            "SurveyDescription",
            "SurveyStartDate",
            "Deleted",
            "SurveyLanguage",
        }
        
        class properties:
        
            @staticmethod
            def SurveyID() -> typing.Type['SurveyID']:
                return SurveyID
            SurveyName = schemas.StrSchema
            
            
            class SurveyDescription(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'SurveyDescription':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def SurveyOwnerID() -> typing.Type['UserID']:
                return UserID
            SurveyBrandID = schemas.StrSchema
            
            
            class DivisionID(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'DivisionID':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            SurveyLanguage = schemas.StrSchema
        
            @staticmethod
            def SurveyActiveResponseSet() -> typing.Type['ResponseSetID']:
                return ResponseSetID
        
            @staticmethod
            def SurveyStatus() -> typing.Type['SurveyStatus']:
                return SurveyStatus
            
            
            class SurveyStartDate(
                schemas.DateTimeBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, datetime, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'SurveyStartDate':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class SurveyExpirationDate(
                schemas.DateTimeBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, datetime, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'SurveyExpirationDate':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class SurveyCreationDate(
                schemas.DateTimeBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, datetime, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'SurveyCreationDate':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def CreatorID() -> typing.Type['UserID']:
                return UserID
            LastModified = schemas.DateTimeSchema
            
            
            class LastAccessed(
                schemas.DateTimeBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, datetime, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'LastAccessed':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class LastActivated(
                schemas.DateTimeBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, datetime, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'LastActivated':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class Deleted(
                schemas.DateTimeBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, datetime, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'Deleted':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "SurveyID": SurveyID,
                "SurveyName": SurveyName,
                "SurveyDescription": SurveyDescription,
                "SurveyOwnerID": SurveyOwnerID,
                "SurveyBrandID": SurveyBrandID,
                "DivisionID": DivisionID,
                "SurveyLanguage": SurveyLanguage,
                "SurveyActiveResponseSet": SurveyActiveResponseSet,
                "SurveyStatus": SurveyStatus,
                "SurveyStartDate": SurveyStartDate,
                "SurveyExpirationDate": SurveyExpirationDate,
                "SurveyCreationDate": SurveyCreationDate,
                "CreatorID": CreatorID,
                "LastModified": LastModified,
                "LastAccessed": LastAccessed,
                "LastActivated": LastActivated,
                "Deleted": Deleted,
            }
    
    LastActivated: MetaOapg.properties.LastActivated
    SurveyID: 'SurveyID'
    CreatorID: 'UserID'
    SurveyActiveResponseSet: 'ResponseSetID'
    SurveyCreationDate: MetaOapg.properties.SurveyCreationDate
    SurveyName: MetaOapg.properties.SurveyName
    DivisionID: MetaOapg.properties.DivisionID
    LastModified: MetaOapg.properties.LastModified
    SurveyBrandID: MetaOapg.properties.SurveyBrandID
    SurveyExpirationDate: MetaOapg.properties.SurveyExpirationDate
    SurveyOwnerID: 'UserID'
    SurveyStatus: 'SurveyStatus'
    LastAccessed: MetaOapg.properties.LastAccessed
    SurveyDescription: MetaOapg.properties.SurveyDescription
    SurveyStartDate: MetaOapg.properties.SurveyStartDate
    Deleted: MetaOapg.properties.Deleted
    SurveyLanguage: MetaOapg.properties.SurveyLanguage
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["SurveyID"]) -> 'SurveyID': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["SurveyName"]) -> MetaOapg.properties.SurveyName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["SurveyDescription"]) -> MetaOapg.properties.SurveyDescription: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["SurveyOwnerID"]) -> 'UserID': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["SurveyBrandID"]) -> MetaOapg.properties.SurveyBrandID: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["DivisionID"]) -> MetaOapg.properties.DivisionID: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["SurveyLanguage"]) -> MetaOapg.properties.SurveyLanguage: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["SurveyActiveResponseSet"]) -> 'ResponseSetID': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["SurveyStatus"]) -> 'SurveyStatus': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["SurveyStartDate"]) -> MetaOapg.properties.SurveyStartDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["SurveyExpirationDate"]) -> MetaOapg.properties.SurveyExpirationDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["SurveyCreationDate"]) -> MetaOapg.properties.SurveyCreationDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["CreatorID"]) -> 'UserID': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["LastModified"]) -> MetaOapg.properties.LastModified: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["LastAccessed"]) -> MetaOapg.properties.LastAccessed: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["LastActivated"]) -> MetaOapg.properties.LastActivated: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Deleted"]) -> MetaOapg.properties.Deleted: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["SurveyID", "SurveyName", "SurveyDescription", "SurveyOwnerID", "SurveyBrandID", "DivisionID", "SurveyLanguage", "SurveyActiveResponseSet", "SurveyStatus", "SurveyStartDate", "SurveyExpirationDate", "SurveyCreationDate", "CreatorID", "LastModified", "LastAccessed", "LastActivated", "Deleted", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["SurveyID"]) -> 'SurveyID': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["SurveyName"]) -> MetaOapg.properties.SurveyName: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["SurveyDescription"]) -> MetaOapg.properties.SurveyDescription: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["SurveyOwnerID"]) -> 'UserID': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["SurveyBrandID"]) -> MetaOapg.properties.SurveyBrandID: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["DivisionID"]) -> MetaOapg.properties.DivisionID: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["SurveyLanguage"]) -> MetaOapg.properties.SurveyLanguage: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["SurveyActiveResponseSet"]) -> 'ResponseSetID': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["SurveyStatus"]) -> 'SurveyStatus': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["SurveyStartDate"]) -> MetaOapg.properties.SurveyStartDate: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["SurveyExpirationDate"]) -> MetaOapg.properties.SurveyExpirationDate: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["SurveyCreationDate"]) -> MetaOapg.properties.SurveyCreationDate: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["CreatorID"]) -> 'UserID': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["LastModified"]) -> MetaOapg.properties.LastModified: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["LastAccessed"]) -> MetaOapg.properties.LastAccessed: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["LastActivated"]) -> MetaOapg.properties.LastActivated: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Deleted"]) -> MetaOapg.properties.Deleted: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["SurveyID", "SurveyName", "SurveyDescription", "SurveyOwnerID", "SurveyBrandID", "DivisionID", "SurveyLanguage", "SurveyActiveResponseSet", "SurveyStatus", "SurveyStartDate", "SurveyExpirationDate", "SurveyCreationDate", "CreatorID", "LastModified", "LastAccessed", "LastActivated", "Deleted", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        LastActivated: typing.Union[MetaOapg.properties.LastActivated, None, str, datetime, ],
        SurveyID: 'SurveyID',
        CreatorID: 'UserID',
        SurveyActiveResponseSet: 'ResponseSetID',
        SurveyCreationDate: typing.Union[MetaOapg.properties.SurveyCreationDate, None, str, datetime, ],
        SurveyName: typing.Union[MetaOapg.properties.SurveyName, str, ],
        DivisionID: typing.Union[MetaOapg.properties.DivisionID, None, str, ],
        LastModified: typing.Union[MetaOapg.properties.LastModified, str, datetime, ],
        SurveyBrandID: typing.Union[MetaOapg.properties.SurveyBrandID, str, ],
        SurveyExpirationDate: typing.Union[MetaOapg.properties.SurveyExpirationDate, None, str, datetime, ],
        SurveyOwnerID: 'UserID',
        SurveyStatus: 'SurveyStatus',
        LastAccessed: typing.Union[MetaOapg.properties.LastAccessed, None, str, datetime, ],
        SurveyDescription: typing.Union[MetaOapg.properties.SurveyDescription, None, str, ],
        SurveyStartDate: typing.Union[MetaOapg.properties.SurveyStartDate, None, str, datetime, ],
        Deleted: typing.Union[MetaOapg.properties.Deleted, None, str, datetime, ],
        SurveyLanguage: typing.Union[MetaOapg.properties.SurveyLanguage, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SurveyMetadata':
        return super().__new__(
            cls,
            *args,
            LastActivated=LastActivated,
            SurveyID=SurveyID,
            CreatorID=CreatorID,
            SurveyActiveResponseSet=SurveyActiveResponseSet,
            SurveyCreationDate=SurveyCreationDate,
            SurveyName=SurveyName,
            DivisionID=DivisionID,
            LastModified=LastModified,
            SurveyBrandID=SurveyBrandID,
            SurveyExpirationDate=SurveyExpirationDate,
            SurveyOwnerID=SurveyOwnerID,
            SurveyStatus=SurveyStatus,
            LastAccessed=LastAccessed,
            SurveyDescription=SurveyDescription,
            SurveyStartDate=SurveyStartDate,
            Deleted=Deleted,
            SurveyLanguage=SurveyLanguage,
            _configuration=_configuration,
            **kwargs,
        )

from qualtrics_survey_python_sdk.model.response_set_id import ResponseSetID
from qualtrics_survey_python_sdk.model.survey_id import SurveyID
from qualtrics_survey_python_sdk.model.survey_status import SurveyStatus
from qualtrics_survey_python_sdk.model.user_id import UserID
