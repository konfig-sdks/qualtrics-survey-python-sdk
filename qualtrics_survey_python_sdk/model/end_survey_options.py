# coding: utf-8

"""
    Qualtrics Survey API

    The Qualtrics Survey endpoints give you access to the structure of the surveys you create.   Surveys have a complex structure, and you are encouraged to become familiar with the structure using your brand's Qualtrics page to build surveys at first. Then you can query those surveys using these endpoints.   Once you are familiar, you can use this API to create surveys on the fly, or modify existing surveys in your library. 

    The version of the OpenAPI document: 3.0.0
    Created by: https://www.qualtrics.com/support/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from qualtrics_survey_python_sdk import schemas  # noqa: F401


class EndSurveyOptions(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "EndingType",
        }
        
        class properties:
            
            
            class EndingType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "Default": "DEFAULT",
                        "Advanced": "ADVANCED",
                    }
                
                @schemas.classproperty
                def DEFAULT(cls):
                    return cls("Default")
                
                @schemas.classproperty
                def ADVANCED(cls):
                    return cls("Advanced")
            
            
            class ResponseFlag(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "QuotaMet": "QUOTA_MET",
                    }
                
                @schemas.classproperty
                def QUOTA_MET(cls):
                    return cls("QuotaMet")
        
            @staticmethod
            def SurveyTermination() -> typing.Type['SurveyTermination']:
                return SurveyTermination
            EOSRedirectURL = schemas.StrSchema
            EOSMessageLibrary = schemas.StrSchema
        
            @staticmethod
            def EOSMessage() -> typing.Type['EOSMessage']:
                return EOSMessage
        
            @staticmethod
            def EmailThankYou() -> typing.Type['EmailThankYou']:
                return EmailThankYou
        
            @staticmethod
            def ThankYouEmailMessageLibrary() -> typing.Type['ThankYouEmailMessageLibrary']:
                return ThankYouEmailMessageLibrary
        
            @staticmethod
            def ThankYouEmailMessage() -> typing.Type['ThankYouEmailMessage']:
                return ThankYouEmailMessage
        
            @staticmethod
            def ResponseSummary() -> typing.Type['ResponseSummary']:
                return ResponseSummary
            
            
            class ConfirmResponseSummary(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "true": "TRUE",
                        "": "EMPTY",
                    }
                
                @schemas.classproperty
                def TRUE(cls):
                    return cls("true")
                
                @schemas.classproperty
                def EMPTY(cls):
                    return cls("")
        
            @staticmethod
            def ConfirmMessageLibrary() -> typing.Type['MessageLibraryID']:
                return MessageLibraryID
        
            @staticmethod
            def ConfirmMessage() -> typing.Type['MessageID']:
                return MessageID
        
            @staticmethod
            def CountQuotas() -> typing.Type['YesNoEmptyString']:
                return YesNoEmptyString
        
            @staticmethod
            def Screenout() -> typing.Type['YesNoEmptyString']:
                return YesNoEmptyString
            ScreenOutName = schemas.StrSchema
        
            @staticmethod
            def AnonymizeResponse() -> typing.Type['YesNoEmptyString']:
                return YesNoEmptyString
        
            @staticmethod
            def IgnoreResponse() -> typing.Type['YesNoEmptyString']:
                return YesNoEmptyString
            __annotations__ = {
                "EndingType": EndingType,
                "ResponseFlag": ResponseFlag,
                "SurveyTermination": SurveyTermination,
                "EOSRedirectURL": EOSRedirectURL,
                "EOSMessageLibrary": EOSMessageLibrary,
                "EOSMessage": EOSMessage,
                "EmailThankYou": EmailThankYou,
                "ThankYouEmailMessageLibrary": ThankYouEmailMessageLibrary,
                "ThankYouEmailMessage": ThankYouEmailMessage,
                "ResponseSummary": ResponseSummary,
                "ConfirmResponseSummary": ConfirmResponseSummary,
                "ConfirmMessageLibrary": ConfirmMessageLibrary,
                "ConfirmMessage": ConfirmMessage,
                "CountQuotas": CountQuotas,
                "Screenout": Screenout,
                "ScreenOutName": ScreenOutName,
                "AnonymizeResponse": AnonymizeResponse,
                "IgnoreResponse": IgnoreResponse,
            }
    
    EndingType: MetaOapg.properties.EndingType
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["EndingType"]) -> MetaOapg.properties.EndingType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ResponseFlag"]) -> MetaOapg.properties.ResponseFlag: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["SurveyTermination"]) -> 'SurveyTermination': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["EOSRedirectURL"]) -> MetaOapg.properties.EOSRedirectURL: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["EOSMessageLibrary"]) -> MetaOapg.properties.EOSMessageLibrary: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["EOSMessage"]) -> 'EOSMessage': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["EmailThankYou"]) -> 'EmailThankYou': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ThankYouEmailMessageLibrary"]) -> 'ThankYouEmailMessageLibrary': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ThankYouEmailMessage"]) -> 'ThankYouEmailMessage': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ResponseSummary"]) -> 'ResponseSummary': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ConfirmResponseSummary"]) -> MetaOapg.properties.ConfirmResponseSummary: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ConfirmMessageLibrary"]) -> 'MessageLibraryID': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ConfirmMessage"]) -> 'MessageID': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["CountQuotas"]) -> 'YesNoEmptyString': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Screenout"]) -> 'YesNoEmptyString': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ScreenOutName"]) -> MetaOapg.properties.ScreenOutName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["AnonymizeResponse"]) -> 'YesNoEmptyString': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["IgnoreResponse"]) -> 'YesNoEmptyString': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["EndingType", "ResponseFlag", "SurveyTermination", "EOSRedirectURL", "EOSMessageLibrary", "EOSMessage", "EmailThankYou", "ThankYouEmailMessageLibrary", "ThankYouEmailMessage", "ResponseSummary", "ConfirmResponseSummary", "ConfirmMessageLibrary", "ConfirmMessage", "CountQuotas", "Screenout", "ScreenOutName", "AnonymizeResponse", "IgnoreResponse", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["EndingType"]) -> MetaOapg.properties.EndingType: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ResponseFlag"]) -> typing.Union[MetaOapg.properties.ResponseFlag, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["SurveyTermination"]) -> typing.Union['SurveyTermination', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["EOSRedirectURL"]) -> typing.Union[MetaOapg.properties.EOSRedirectURL, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["EOSMessageLibrary"]) -> typing.Union[MetaOapg.properties.EOSMessageLibrary, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["EOSMessage"]) -> typing.Union['EOSMessage', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["EmailThankYou"]) -> typing.Union['EmailThankYou', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ThankYouEmailMessageLibrary"]) -> typing.Union['ThankYouEmailMessageLibrary', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ThankYouEmailMessage"]) -> typing.Union['ThankYouEmailMessage', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ResponseSummary"]) -> typing.Union['ResponseSummary', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ConfirmResponseSummary"]) -> typing.Union[MetaOapg.properties.ConfirmResponseSummary, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ConfirmMessageLibrary"]) -> typing.Union['MessageLibraryID', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ConfirmMessage"]) -> typing.Union['MessageID', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["CountQuotas"]) -> typing.Union['YesNoEmptyString', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Screenout"]) -> typing.Union['YesNoEmptyString', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ScreenOutName"]) -> typing.Union[MetaOapg.properties.ScreenOutName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["AnonymizeResponse"]) -> typing.Union['YesNoEmptyString', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["IgnoreResponse"]) -> typing.Union['YesNoEmptyString', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["EndingType", "ResponseFlag", "SurveyTermination", "EOSRedirectURL", "EOSMessageLibrary", "EOSMessage", "EmailThankYou", "ThankYouEmailMessageLibrary", "ThankYouEmailMessage", "ResponseSummary", "ConfirmResponseSummary", "ConfirmMessageLibrary", "ConfirmMessage", "CountQuotas", "Screenout", "ScreenOutName", "AnonymizeResponse", "IgnoreResponse", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        EndingType: typing.Union[MetaOapg.properties.EndingType, str, ],
        ResponseFlag: typing.Union[MetaOapg.properties.ResponseFlag, str, schemas.Unset] = schemas.unset,
        SurveyTermination: typing.Union['SurveyTermination', schemas.Unset] = schemas.unset,
        EOSRedirectURL: typing.Union[MetaOapg.properties.EOSRedirectURL, str, schemas.Unset] = schemas.unset,
        EOSMessageLibrary: typing.Union[MetaOapg.properties.EOSMessageLibrary, str, schemas.Unset] = schemas.unset,
        EOSMessage: typing.Union['EOSMessage', schemas.Unset] = schemas.unset,
        EmailThankYou: typing.Union['EmailThankYou', schemas.Unset] = schemas.unset,
        ThankYouEmailMessageLibrary: typing.Union['ThankYouEmailMessageLibrary', schemas.Unset] = schemas.unset,
        ThankYouEmailMessage: typing.Union['ThankYouEmailMessage', schemas.Unset] = schemas.unset,
        ResponseSummary: typing.Union['ResponseSummary', schemas.Unset] = schemas.unset,
        ConfirmResponseSummary: typing.Union[MetaOapg.properties.ConfirmResponseSummary, str, schemas.Unset] = schemas.unset,
        ConfirmMessageLibrary: typing.Union['MessageLibraryID', schemas.Unset] = schemas.unset,
        ConfirmMessage: typing.Union['MessageID', schemas.Unset] = schemas.unset,
        CountQuotas: typing.Union['YesNoEmptyString', schemas.Unset] = schemas.unset,
        Screenout: typing.Union['YesNoEmptyString', schemas.Unset] = schemas.unset,
        ScreenOutName: typing.Union[MetaOapg.properties.ScreenOutName, str, schemas.Unset] = schemas.unset,
        AnonymizeResponse: typing.Union['YesNoEmptyString', schemas.Unset] = schemas.unset,
        IgnoreResponse: typing.Union['YesNoEmptyString', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'EndSurveyOptions':
        return super().__new__(
            cls,
            *args,
            EndingType=EndingType,
            ResponseFlag=ResponseFlag,
            SurveyTermination=SurveyTermination,
            EOSRedirectURL=EOSRedirectURL,
            EOSMessageLibrary=EOSMessageLibrary,
            EOSMessage=EOSMessage,
            EmailThankYou=EmailThankYou,
            ThankYouEmailMessageLibrary=ThankYouEmailMessageLibrary,
            ThankYouEmailMessage=ThankYouEmailMessage,
            ResponseSummary=ResponseSummary,
            ConfirmResponseSummary=ConfirmResponseSummary,
            ConfirmMessageLibrary=ConfirmMessageLibrary,
            ConfirmMessage=ConfirmMessage,
            CountQuotas=CountQuotas,
            Screenout=Screenout,
            ScreenOutName=ScreenOutName,
            AnonymizeResponse=AnonymizeResponse,
            IgnoreResponse=IgnoreResponse,
            _configuration=_configuration,
            **kwargs,
        )

from qualtrics_survey_python_sdk.model.email_thank_you import EmailThankYou
from qualtrics_survey_python_sdk.model.eos_message import EOSMessage
from qualtrics_survey_python_sdk.model.message_id import MessageID
from qualtrics_survey_python_sdk.model.message_library_id import MessageLibraryID
from qualtrics_survey_python_sdk.model.response_summary import ResponseSummary
from qualtrics_survey_python_sdk.model.survey_termination import SurveyTermination
from qualtrics_survey_python_sdk.model.thank_you_email_message import ThankYouEmailMessage
from qualtrics_survey_python_sdk.model.thank_you_email_message_library import ThankYouEmailMessageLibrary
from qualtrics_survey_python_sdk.model.yes_no_empty_string import YesNoEmptyString
