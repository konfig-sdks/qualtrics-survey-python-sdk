# coding: utf-8

"""
    Qualtrics Survey API

    The Qualtrics Survey endpoints give you access to the structure of the surveys you create.   Surveys have a complex structure, and you are encouraged to become familiar with the structure using your brand's Qualtrics page to build surveys at first. Then you can query those surveys using these endpoints.   Once you are familiar, you can use this API to create surveys on the fly, or modify existing surveys in your library. 

    The version of the OpenAPI document: 3.0.0
    Created by: https://www.qualtrics.com/support/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from qualtrics_survey_python_sdk import schemas  # noqa: F401


class QuestionDefinition(
    schemas.ComposedBase,
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        
        class any_of_0(
            schemas.DictSchema
        ):
        
        
            class MetaOapg:
                required = {
                    "Validation",
                    "ChoiceOrder",
                    "Choices",
                    "Configuration",
                    "Language",
                    "SubSelector",
                    "QuestionType",
                    "QuestionText",
                    "QuestionDescription",
                    "Selector",
                }
                
                class properties:
                
                    @staticmethod
                    def ChoiceOrder() -> typing.Type['ChoiceOrder']:
                        return ChoiceOrder
                
                    @staticmethod
                    def Choices() -> typing.Type['QuestionChoices']:
                        return QuestionChoices
                
                    @staticmethod
                    def Configuration() -> typing.Type['QuestionConfiguration']:
                        return QuestionConfiguration
                    DataExportTag = schemas.StrSchema
                
                    @staticmethod
                    def Language() -> typing.Type['Language']:
                        return Language
                    NextAnswerId = schemas.IntSchema
                    NextChoiceId = schemas.IntSchema
                    QuestionDescription = schemas.StrSchema
                
                    @staticmethod
                    def QuestionID() -> typing.Type['QuestionID']:
                        return QuestionID
                
                    @staticmethod
                    def QuestionText() -> typing.Type['QuestionText']:
                        return QuestionText
                    
                    
                    class QuestionType(
                        schemas.EnumBase,
                        schemas.StrSchema
                    ):
                        
                        @schemas.classproperty
                        def MC(cls):
                            return cls("MC")
                
                    @staticmethod
                    def Randomization() -> typing.Type['Randomization']:
                        return Randomization
                
                    @staticmethod
                    def RecodeValues() -> typing.Type['RecodeValues']:
                        return RecodeValues
                    
                    
                    class Selector(
                        schemas.EnumBase,
                        schemas.StrSchema
                    ):
                        
                        @schemas.classproperty
                        def DL(cls):
                            return cls("DL")
                        
                        @schemas.classproperty
                        def GRB(cls):
                            return cls("GRB")
                        
                        @schemas.classproperty
                        def MACOL(cls):
                            return cls("MACOL")
                        
                        @schemas.classproperty
                        def MAHR(cls):
                            return cls("MAHR")
                        
                        @schemas.classproperty
                        def MAVR(cls):
                            return cls("MAVR")
                        
                        @schemas.classproperty
                        def MSB(cls):
                            return cls("MSB")
                        
                        @schemas.classproperty
                        def NPS(cls):
                            return cls("NPS")
                        
                        @schemas.classproperty
                        def SACOL(cls):
                            return cls("SACOL")
                        
                        @schemas.classproperty
                        def SAHR(cls):
                            return cls("SAHR")
                        
                        @schemas.classproperty
                        def SAVR(cls):
                            return cls("SAVR")
                        
                        @schemas.classproperty
                        def SB(cls):
                            return cls("SB")
                        
                        @schemas.classproperty
                        def TB(cls):
                            return cls("TB")
                        
                        @schemas.classproperty
                        def TXOT(cls):
                            return cls("TXOT")
                        
                        @schemas.classproperty
                        def PTB(cls):
                            return cls("PTB")
                    
                    
                    class SubSelector(
                        schemas.EnumBase,
                        schemas.StrSchema
                    ):
                        
                        @schemas.classproperty
                        def GR(cls):
                            return cls("GR")
                        
                        @schemas.classproperty
                        def TX(cls):
                            return cls("TX")
                        
                        @schemas.classproperty
                        def TXOT(cls):
                            return cls("TXOT")
                        
                        @schemas.classproperty
                        def WOTXB(cls):
                            return cls("WOTXB")
                        
                        @schemas.classproperty
                        def WTXB(cls):
                            return cls("WTXB")
                
                    @staticmethod
                    def Validation() -> typing.Type['Validation']:
                        return Validation
                    __annotations__ = {
                        "ChoiceOrder": ChoiceOrder,
                        "Choices": Choices,
                        "Configuration": Configuration,
                        "DataExportTag": DataExportTag,
                        "Language": Language,
                        "NextAnswerId": NextAnswerId,
                        "NextChoiceId": NextChoiceId,
                        "QuestionDescription": QuestionDescription,
                        "QuestionID": QuestionID,
                        "QuestionText": QuestionText,
                        "QuestionType": QuestionType,
                        "Randomization": Randomization,
                        "RecodeValues": RecodeValues,
                        "Selector": Selector,
                        "SubSelector": SubSelector,
                        "Validation": Validation,
                    }
                additional_properties = schemas.AnyTypeSchema
            
            Validation: 'Validation'
            ChoiceOrder: 'ChoiceOrder'
            Choices: 'QuestionChoices'
            Configuration: 'QuestionConfiguration'
            Language: 'Language'
            SubSelector: MetaOapg.properties.SubSelector
            QuestionType: MetaOapg.properties.QuestionType
            QuestionText: 'QuestionText'
            QuestionDescription: MetaOapg.properties.QuestionDescription
            Selector: MetaOapg.properties.Selector
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["Validation"]) -> 'Validation': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["ChoiceOrder"]) -> 'ChoiceOrder': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["Choices"]) -> 'QuestionChoices': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["Configuration"]) -> 'QuestionConfiguration': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["Language"]) -> 'Language': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["SubSelector"]) -> MetaOapg.properties.SubSelector: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["QuestionType"]) -> MetaOapg.properties.QuestionType: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["QuestionText"]) -> 'QuestionText': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["QuestionDescription"]) -> MetaOapg.properties.QuestionDescription: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["Selector"]) -> MetaOapg.properties.Selector: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["DataExportTag"]) -> MetaOapg.properties.DataExportTag: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["NextAnswerId"]) -> MetaOapg.properties.NextAnswerId: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["NextChoiceId"]) -> MetaOapg.properties.NextChoiceId: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["QuestionID"]) -> 'QuestionID': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["Randomization"]) -> 'Randomization': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["RecodeValues"]) -> 'RecodeValues': ...
            
            @typing.overload
            def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["Validation"], typing_extensions.Literal["ChoiceOrder"], typing_extensions.Literal["Choices"], typing_extensions.Literal["Configuration"], typing_extensions.Literal["Language"], typing_extensions.Literal["SubSelector"], typing_extensions.Literal["QuestionType"], typing_extensions.Literal["QuestionText"], typing_extensions.Literal["QuestionDescription"], typing_extensions.Literal["Selector"], typing_extensions.Literal["DataExportTag"], typing_extensions.Literal["NextAnswerId"], typing_extensions.Literal["NextChoiceId"], typing_extensions.Literal["QuestionID"], typing_extensions.Literal["Randomization"], typing_extensions.Literal["RecodeValues"], str, ]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["Validation"]) -> 'Validation': ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["ChoiceOrder"]) -> 'ChoiceOrder': ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["Choices"]) -> 'QuestionChoices': ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["Configuration"]) -> 'QuestionConfiguration': ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["Language"]) -> 'Language': ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["SubSelector"]) -> MetaOapg.properties.SubSelector: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["QuestionType"]) -> MetaOapg.properties.QuestionType: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["QuestionText"]) -> 'QuestionText': ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["QuestionDescription"]) -> MetaOapg.properties.QuestionDescription: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["Selector"]) -> MetaOapg.properties.Selector: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["DataExportTag"]) -> typing.Union[MetaOapg.properties.DataExportTag, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["NextAnswerId"]) -> typing.Union[MetaOapg.properties.NextAnswerId, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["NextChoiceId"]) -> typing.Union[MetaOapg.properties.NextChoiceId, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["QuestionID"]) -> typing.Union['QuestionID', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["Randomization"]) -> typing.Union['Randomization', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["RecodeValues"]) -> typing.Union['RecodeValues', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["Validation"], typing_extensions.Literal["ChoiceOrder"], typing_extensions.Literal["Choices"], typing_extensions.Literal["Configuration"], typing_extensions.Literal["Language"], typing_extensions.Literal["SubSelector"], typing_extensions.Literal["QuestionType"], typing_extensions.Literal["QuestionText"], typing_extensions.Literal["QuestionDescription"], typing_extensions.Literal["Selector"], typing_extensions.Literal["DataExportTag"], typing_extensions.Literal["NextAnswerId"], typing_extensions.Literal["NextChoiceId"], typing_extensions.Literal["QuestionID"], typing_extensions.Literal["Randomization"], typing_extensions.Literal["RecodeValues"], str, ]):
                return super().get_item_oapg(name)
        
            def __new__(
                cls,
                *args: typing.Union[dict, frozendict.frozendict, ],
                Validation: 'Validation',
                ChoiceOrder: 'ChoiceOrder',
                Choices: 'QuestionChoices',
                Configuration: 'QuestionConfiguration',
                Language: 'Language',
                SubSelector: typing.Union[MetaOapg.properties.SubSelector, str, ],
                QuestionType: typing.Union[MetaOapg.properties.QuestionType, str, ],
                QuestionText: 'QuestionText',
                QuestionDescription: typing.Union[MetaOapg.properties.QuestionDescription, str, ],
                Selector: typing.Union[MetaOapg.properties.Selector, str, ],
                DataExportTag: typing.Union[MetaOapg.properties.DataExportTag, str, schemas.Unset] = schemas.unset,
                NextAnswerId: typing.Union[MetaOapg.properties.NextAnswerId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                NextChoiceId: typing.Union[MetaOapg.properties.NextChoiceId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                QuestionID: typing.Union['QuestionID', schemas.Unset] = schemas.unset,
                Randomization: typing.Union['Randomization', schemas.Unset] = schemas.unset,
                RecodeValues: typing.Union['RecodeValues', schemas.Unset] = schemas.unset,
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
            ) -> 'any_of_0':
                return super().__new__(
                    cls,
                    *args,
                    Validation=Validation,
                    ChoiceOrder=ChoiceOrder,
                    Choices=Choices,
                    Configuration=Configuration,
                    Language=Language,
                    SubSelector=SubSelector,
                    QuestionType=QuestionType,
                    QuestionText=QuestionText,
                    QuestionDescription=QuestionDescription,
                    Selector=Selector,
                    DataExportTag=DataExportTag,
                    NextAnswerId=NextAnswerId,
                    NextChoiceId=NextChoiceId,
                    QuestionID=QuestionID,
                    Randomization=Randomization,
                    RecodeValues=RecodeValues,
                    _configuration=_configuration,
                    **kwargs,
                )
        
        
        class any_of_1(
            schemas.DictSchema
        ):
        
        
            class MetaOapg:
                required = {
                    "ChoiceDataExportTags",
                    "Validation",
                    "Answers",
                    "ChoiceOrder",
                    "Configuration",
                    "AnswerOrder",
                    "QuestionType",
                    "DataExportTag",
                    "Choices",
                    "Language",
                    "SubSelector",
                    "DefaultChoices",
                    "QuestionText",
                    "QuestionDescription",
                    "Selector",
                }
                
                class properties:
                
                    @staticmethod
                    def AnswerOrder() -> typing.Type['ChoiceOrder']:
                        return ChoiceOrder
                
                    @staticmethod
                    def Answers() -> typing.Type['QuestionChoices']:
                        return QuestionChoices
                
                    @staticmethod
                    def AnswerRandomization() -> typing.Type['AnswerRandomization']:
                        return AnswerRandomization
                    ChoiceDataExportTags = schemas.BoolSchema
                
                    @staticmethod
                    def ChoiceOrder() -> typing.Type['ChoiceOrder']:
                        return ChoiceOrder
                
                    @staticmethod
                    def Choices() -> typing.Type['QuestionChoices']:
                        return QuestionChoices
                
                    @staticmethod
                    def Configuration() -> typing.Type['QuestionConfiguration']:
                        return QuestionConfiguration
                    DataExportTag = schemas.StrSchema
                    DefaultChoices = schemas.BoolSchema
                
                    @staticmethod
                    def Language() -> typing.Type['Language']:
                        return Language
                    NextAnswerId = schemas.IntSchema
                    NextChoiceId = schemas.IntSchema
                    
                    
                    class QuestionDescription(
                        schemas.StrSchema
                    ):
                        pass
                
                    @staticmethod
                    def QuestionID() -> typing.Type['QuestionID']:
                        return QuestionID
                
                    @staticmethod
                    def QuestionText() -> typing.Type['QuestionText']:
                        return QuestionText
                    
                    
                    class QuestionType(
                        schemas.EnumBase,
                        schemas.StrSchema
                    ):
                        
                        @schemas.classproperty
                        def MATRIX(cls):
                            return cls("Matrix")
                
                    @staticmethod
                    def Randomization() -> typing.Type['Randomization']:
                        return Randomization
                
                    @staticmethod
                    def RecodeValues() -> typing.Type['RecodeValues']:
                        return RecodeValues
                    
                    
                    class Selector(
                        schemas.EnumBase,
                        schemas.StrSchema
                    ):
                        
                        @schemas.classproperty
                        def BIPOLAR(cls):
                            return cls("Bipolar")
                        
                        @schemas.classproperty
                        def LIKERT(cls):
                            return cls("Likert")
                        
                        @schemas.classproperty
                        def TE(cls):
                            return cls("TE")
                        
                        @schemas.classproperty
                        def PROFILE(cls):
                            return cls("Profile")
                        
                        @schemas.classproperty
                        def CS(cls):
                            return cls("CS")
                        
                        @schemas.classproperty
                        def RO(cls):
                            return cls("RO")
                        
                        @schemas.classproperty
                        def MAX_DIFF(cls):
                            return cls("MaxDiff")
                    
                    
                    class SubSelector(
                        schemas.EnumBase,
                        schemas.StrSchema
                    ):
                        
                        @schemas.classproperty
                        def DL(cls):
                            return cls("DL")
                        
                        @schemas.classproperty
                        def DND(cls):
                            return cls("DND")
                        
                        @schemas.classproperty
                        def LONG(cls):
                            return cls("Long")
                        
                        @schemas.classproperty
                        def MEDIUM(cls):
                            return cls("Medium")
                        
                        @schemas.classproperty
                        def MULTIPLE_ANSWER(cls):
                            return cls("MultipleAnswer")
                        
                        @schemas.classproperty
                        def SHORT(cls):
                            return cls("Short")
                        
                        @schemas.classproperty
                        def SINGLE_ANSWER(cls):
                            return cls("SingleAnswer")
                        
                        @schemas.classproperty
                        def WOTB(cls):
                            return cls("WOTB")
                        
                        @schemas.classproperty
                        def WTB(cls):
                            return cls("WTB")
                        
                        @schemas.classproperty
                        def WVTB(cls):
                            return cls("WVTB")
                        
                        @schemas.classproperty
                        def WTXB(cls):
                            return cls("WTXB")
                        
                        @schemas.classproperty
                        def ESSAY(cls):
                            return cls("Essay")
                
                    @staticmethod
                    def Validation() -> typing.Type['Validation']:
                        return Validation
                    __annotations__ = {
                        "AnswerOrder": AnswerOrder,
                        "Answers": Answers,
                        "AnswerRandomization": AnswerRandomization,
                        "ChoiceDataExportTags": ChoiceDataExportTags,
                        "ChoiceOrder": ChoiceOrder,
                        "Choices": Choices,
                        "Configuration": Configuration,
                        "DataExportTag": DataExportTag,
                        "DefaultChoices": DefaultChoices,
                        "Language": Language,
                        "NextAnswerId": NextAnswerId,
                        "NextChoiceId": NextChoiceId,
                        "QuestionDescription": QuestionDescription,
                        "QuestionID": QuestionID,
                        "QuestionText": QuestionText,
                        "QuestionType": QuestionType,
                        "Randomization": Randomization,
                        "RecodeValues": RecodeValues,
                        "Selector": Selector,
                        "SubSelector": SubSelector,
                        "Validation": Validation,
                    }
                additional_properties = schemas.AnyTypeSchema
            
            ChoiceDataExportTags: MetaOapg.properties.ChoiceDataExportTags
            Validation: 'Validation'
            Answers: 'QuestionChoices'
            ChoiceOrder: 'ChoiceOrder'
            Configuration: 'QuestionConfiguration'
            AnswerOrder: 'ChoiceOrder'
            QuestionType: MetaOapg.properties.QuestionType
            DataExportTag: MetaOapg.properties.DataExportTag
            Choices: 'QuestionChoices'
            Language: 'Language'
            SubSelector: MetaOapg.properties.SubSelector
            DefaultChoices: MetaOapg.properties.DefaultChoices
            QuestionText: 'QuestionText'
            QuestionDescription: MetaOapg.properties.QuestionDescription
            Selector: MetaOapg.properties.Selector
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["ChoiceDataExportTags"]) -> MetaOapg.properties.ChoiceDataExportTags: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["Validation"]) -> 'Validation': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["Answers"]) -> 'QuestionChoices': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["ChoiceOrder"]) -> 'ChoiceOrder': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["Configuration"]) -> 'QuestionConfiguration': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["AnswerOrder"]) -> 'ChoiceOrder': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["QuestionType"]) -> MetaOapg.properties.QuestionType: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["DataExportTag"]) -> MetaOapg.properties.DataExportTag: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["Choices"]) -> 'QuestionChoices': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["Language"]) -> 'Language': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["SubSelector"]) -> MetaOapg.properties.SubSelector: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["DefaultChoices"]) -> MetaOapg.properties.DefaultChoices: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["QuestionText"]) -> 'QuestionText': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["QuestionDescription"]) -> MetaOapg.properties.QuestionDescription: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["Selector"]) -> MetaOapg.properties.Selector: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["AnswerRandomization"]) -> 'AnswerRandomization': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["NextAnswerId"]) -> MetaOapg.properties.NextAnswerId: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["NextChoiceId"]) -> MetaOapg.properties.NextChoiceId: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["QuestionID"]) -> 'QuestionID': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["Randomization"]) -> 'Randomization': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["RecodeValues"]) -> 'RecodeValues': ...
            
            @typing.overload
            def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["ChoiceDataExportTags"], typing_extensions.Literal["Validation"], typing_extensions.Literal["Answers"], typing_extensions.Literal["ChoiceOrder"], typing_extensions.Literal["Configuration"], typing_extensions.Literal["AnswerOrder"], typing_extensions.Literal["QuestionType"], typing_extensions.Literal["DataExportTag"], typing_extensions.Literal["Choices"], typing_extensions.Literal["Language"], typing_extensions.Literal["SubSelector"], typing_extensions.Literal["DefaultChoices"], typing_extensions.Literal["QuestionText"], typing_extensions.Literal["QuestionDescription"], typing_extensions.Literal["Selector"], typing_extensions.Literal["AnswerRandomization"], typing_extensions.Literal["NextAnswerId"], typing_extensions.Literal["NextChoiceId"], typing_extensions.Literal["QuestionID"], typing_extensions.Literal["Randomization"], typing_extensions.Literal["RecodeValues"], str, ]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["ChoiceDataExportTags"]) -> MetaOapg.properties.ChoiceDataExportTags: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["Validation"]) -> 'Validation': ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["Answers"]) -> 'QuestionChoices': ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["ChoiceOrder"]) -> 'ChoiceOrder': ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["Configuration"]) -> 'QuestionConfiguration': ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["AnswerOrder"]) -> 'ChoiceOrder': ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["QuestionType"]) -> MetaOapg.properties.QuestionType: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["DataExportTag"]) -> MetaOapg.properties.DataExportTag: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["Choices"]) -> 'QuestionChoices': ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["Language"]) -> 'Language': ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["SubSelector"]) -> MetaOapg.properties.SubSelector: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["DefaultChoices"]) -> MetaOapg.properties.DefaultChoices: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["QuestionText"]) -> 'QuestionText': ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["QuestionDescription"]) -> MetaOapg.properties.QuestionDescription: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["Selector"]) -> MetaOapg.properties.Selector: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["AnswerRandomization"]) -> typing.Union['AnswerRandomization', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["NextAnswerId"]) -> typing.Union[MetaOapg.properties.NextAnswerId, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["NextChoiceId"]) -> typing.Union[MetaOapg.properties.NextChoiceId, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["QuestionID"]) -> typing.Union['QuestionID', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["Randomization"]) -> typing.Union['Randomization', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["RecodeValues"]) -> typing.Union['RecodeValues', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["ChoiceDataExportTags"], typing_extensions.Literal["Validation"], typing_extensions.Literal["Answers"], typing_extensions.Literal["ChoiceOrder"], typing_extensions.Literal["Configuration"], typing_extensions.Literal["AnswerOrder"], typing_extensions.Literal["QuestionType"], typing_extensions.Literal["DataExportTag"], typing_extensions.Literal["Choices"], typing_extensions.Literal["Language"], typing_extensions.Literal["SubSelector"], typing_extensions.Literal["DefaultChoices"], typing_extensions.Literal["QuestionText"], typing_extensions.Literal["QuestionDescription"], typing_extensions.Literal["Selector"], typing_extensions.Literal["AnswerRandomization"], typing_extensions.Literal["NextAnswerId"], typing_extensions.Literal["NextChoiceId"], typing_extensions.Literal["QuestionID"], typing_extensions.Literal["Randomization"], typing_extensions.Literal["RecodeValues"], str, ]):
                return super().get_item_oapg(name)
        
            def __new__(
                cls,
                *args: typing.Union[dict, frozendict.frozendict, ],
                ChoiceDataExportTags: typing.Union[MetaOapg.properties.ChoiceDataExportTags, bool, ],
                Validation: 'Validation',
                Answers: 'QuestionChoices',
                ChoiceOrder: 'ChoiceOrder',
                Configuration: 'QuestionConfiguration',
                AnswerOrder: 'ChoiceOrder',
                QuestionType: typing.Union[MetaOapg.properties.QuestionType, str, ],
                DataExportTag: typing.Union[MetaOapg.properties.DataExportTag, str, ],
                Choices: 'QuestionChoices',
                Language: 'Language',
                SubSelector: typing.Union[MetaOapg.properties.SubSelector, str, ],
                DefaultChoices: typing.Union[MetaOapg.properties.DefaultChoices, bool, ],
                QuestionText: 'QuestionText',
                QuestionDescription: typing.Union[MetaOapg.properties.QuestionDescription, str, ],
                Selector: typing.Union[MetaOapg.properties.Selector, str, ],
                AnswerRandomization: typing.Union['AnswerRandomization', schemas.Unset] = schemas.unset,
                NextAnswerId: typing.Union[MetaOapg.properties.NextAnswerId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                NextChoiceId: typing.Union[MetaOapg.properties.NextChoiceId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                QuestionID: typing.Union['QuestionID', schemas.Unset] = schemas.unset,
                Randomization: typing.Union['Randomization', schemas.Unset] = schemas.unset,
                RecodeValues: typing.Union['RecodeValues', schemas.Unset] = schemas.unset,
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
            ) -> 'any_of_1':
                return super().__new__(
                    cls,
                    *args,
                    ChoiceDataExportTags=ChoiceDataExportTags,
                    Validation=Validation,
                    Answers=Answers,
                    ChoiceOrder=ChoiceOrder,
                    Configuration=Configuration,
                    AnswerOrder=AnswerOrder,
                    QuestionType=QuestionType,
                    DataExportTag=DataExportTag,
                    Choices=Choices,
                    Language=Language,
                    SubSelector=SubSelector,
                    DefaultChoices=DefaultChoices,
                    QuestionText=QuestionText,
                    QuestionDescription=QuestionDescription,
                    Selector=Selector,
                    AnswerRandomization=AnswerRandomization,
                    NextAnswerId=NextAnswerId,
                    NextChoiceId=NextChoiceId,
                    QuestionID=QuestionID,
                    Randomization=Randomization,
                    RecodeValues=RecodeValues,
                    _configuration=_configuration,
                    **kwargs,
                )
        
        
        class any_of_2(
            schemas.DictSchema
        ):
        
        
            class MetaOapg:
                required = {
                    "Validation",
                    "Configuration",
                    "Language",
                    "DefaultChoices",
                    "QuestionType",
                    "QuestionText",
                    "DataExportTag",
                    "QuestionDescription",
                    "Selector",
                }
                
                class properties:
                
                    @staticmethod
                    def Configuration() -> typing.Type['QuestionConfiguration']:
                        return QuestionConfiguration
                    DataExportTag = schemas.StrSchema
                    DefaultChoices = schemas.BoolSchema
                
                    @staticmethod
                    def Language() -> typing.Type['Language']:
                        return Language
                    NextAnswerId = schemas.IntSchema
                    NextChoiceId = schemas.IntSchema
                    
                    
                    class QuestionDescription(
                        schemas.StrSchema
                    ):
                        pass
                
                    @staticmethod
                    def QuestionID() -> typing.Type['QuestionID']:
                        return QuestionID
                
                    @staticmethod
                    def QuestionText() -> typing.Type['QuestionText']:
                        return QuestionText
                
                    @staticmethod
                    def QuestionType() -> typing.Type['QuestionType']:
                        return QuestionType
                    
                    
                    class Selector(
                        schemas.EnumBase,
                        schemas.StrSchema
                    ):
                        
                        @schemas.classproperty
                        def SL(cls):
                            return cls("SL")
                        
                        @schemas.classproperty
                        def ML(cls):
                            return cls("ML")
                        
                        @schemas.classproperty
                        def ESTB(cls):
                            return cls("ESTB")
                        
                        @schemas.classproperty
                        def FORM(cls):
                            return cls("FORM")
                        
                        @schemas.classproperty
                        def PW(cls):
                            return cls("PW")
                
                    @staticmethod
                    def Validation() -> typing.Type['Validation']:
                        return Validation
                    __annotations__ = {
                        "Configuration": Configuration,
                        "DataExportTag": DataExportTag,
                        "DefaultChoices": DefaultChoices,
                        "Language": Language,
                        "NextAnswerId": NextAnswerId,
                        "NextChoiceId": NextChoiceId,
                        "QuestionDescription": QuestionDescription,
                        "QuestionID": QuestionID,
                        "QuestionText": QuestionText,
                        "QuestionType": QuestionType,
                        "Selector": Selector,
                        "Validation": Validation,
                    }
                additional_properties = schemas.AnyTypeSchema
            
            Validation: 'Validation'
            Configuration: 'QuestionConfiguration'
            Language: 'Language'
            DefaultChoices: MetaOapg.properties.DefaultChoices
            QuestionType: 'QuestionType'
            QuestionText: 'QuestionText'
            DataExportTag: MetaOapg.properties.DataExportTag
            QuestionDescription: MetaOapg.properties.QuestionDescription
            Selector: MetaOapg.properties.Selector
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["Validation"]) -> 'Validation': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["Configuration"]) -> 'QuestionConfiguration': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["Language"]) -> 'Language': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["DefaultChoices"]) -> MetaOapg.properties.DefaultChoices: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["QuestionType"]) -> 'QuestionType': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["QuestionText"]) -> 'QuestionText': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["DataExportTag"]) -> MetaOapg.properties.DataExportTag: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["QuestionDescription"]) -> MetaOapg.properties.QuestionDescription: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["Selector"]) -> MetaOapg.properties.Selector: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["NextAnswerId"]) -> MetaOapg.properties.NextAnswerId: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["NextChoiceId"]) -> MetaOapg.properties.NextChoiceId: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["QuestionID"]) -> 'QuestionID': ...
            
            @typing.overload
            def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["Validation"], typing_extensions.Literal["Configuration"], typing_extensions.Literal["Language"], typing_extensions.Literal["DefaultChoices"], typing_extensions.Literal["QuestionType"], typing_extensions.Literal["QuestionText"], typing_extensions.Literal["DataExportTag"], typing_extensions.Literal["QuestionDescription"], typing_extensions.Literal["Selector"], typing_extensions.Literal["NextAnswerId"], typing_extensions.Literal["NextChoiceId"], typing_extensions.Literal["QuestionID"], str, ]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["Validation"]) -> 'Validation': ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["Configuration"]) -> 'QuestionConfiguration': ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["Language"]) -> 'Language': ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["DefaultChoices"]) -> MetaOapg.properties.DefaultChoices: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["QuestionType"]) -> 'QuestionType': ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["QuestionText"]) -> 'QuestionText': ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["DataExportTag"]) -> MetaOapg.properties.DataExportTag: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["QuestionDescription"]) -> MetaOapg.properties.QuestionDescription: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["Selector"]) -> MetaOapg.properties.Selector: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["NextAnswerId"]) -> typing.Union[MetaOapg.properties.NextAnswerId, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["NextChoiceId"]) -> typing.Union[MetaOapg.properties.NextChoiceId, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["QuestionID"]) -> typing.Union['QuestionID', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["Validation"], typing_extensions.Literal["Configuration"], typing_extensions.Literal["Language"], typing_extensions.Literal["DefaultChoices"], typing_extensions.Literal["QuestionType"], typing_extensions.Literal["QuestionText"], typing_extensions.Literal["DataExportTag"], typing_extensions.Literal["QuestionDescription"], typing_extensions.Literal["Selector"], typing_extensions.Literal["NextAnswerId"], typing_extensions.Literal["NextChoiceId"], typing_extensions.Literal["QuestionID"], str, ]):
                return super().get_item_oapg(name)
        
            def __new__(
                cls,
                *args: typing.Union[dict, frozendict.frozendict, ],
                Validation: 'Validation',
                Configuration: 'QuestionConfiguration',
                Language: 'Language',
                DefaultChoices: typing.Union[MetaOapg.properties.DefaultChoices, bool, ],
                QuestionType: 'QuestionType',
                QuestionText: 'QuestionText',
                DataExportTag: typing.Union[MetaOapg.properties.DataExportTag, str, ],
                QuestionDescription: typing.Union[MetaOapg.properties.QuestionDescription, str, ],
                Selector: typing.Union[MetaOapg.properties.Selector, str, ],
                NextAnswerId: typing.Union[MetaOapg.properties.NextAnswerId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                NextChoiceId: typing.Union[MetaOapg.properties.NextChoiceId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                QuestionID: typing.Union['QuestionID', schemas.Unset] = schemas.unset,
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
            ) -> 'any_of_2':
                return super().__new__(
                    cls,
                    *args,
                    Validation=Validation,
                    Configuration=Configuration,
                    Language=Language,
                    DefaultChoices=DefaultChoices,
                    QuestionType=QuestionType,
                    QuestionText=QuestionText,
                    DataExportTag=DataExportTag,
                    QuestionDescription=QuestionDescription,
                    Selector=Selector,
                    NextAnswerId=NextAnswerId,
                    NextChoiceId=NextChoiceId,
                    QuestionID=QuestionID,
                    _configuration=_configuration,
                    **kwargs,
                )
        
        
        class any_of_3(
            schemas.DictSchema
        ):
        
        
            class MetaOapg:
                required = {
                    "Validation",
                    "ChoiceOrder",
                    "Configuration",
                    "QuestionType",
                    "Labels",
                    "DataExportTag",
                    "NextChoiceId",
                    "NextAnswerId",
                    "Choices",
                    "Language",
                    "SubSelector",
                    "QuestionText",
                    "QuestionDescription",
                    "Selector",
                }
                
                class properties:
                
                    @staticmethod
                    def ChoiceOrder() -> typing.Type['ChoiceOrder']:
                        return ChoiceOrder
                
                    @staticmethod
                    def Choices() -> typing.Type['QuestionChoices']:
                        return QuestionChoices
                
                    @staticmethod
                    def Configuration() -> typing.Type['QuestionConfiguration']:
                        return QuestionConfiguration
                    DataExportTag = schemas.StrSchema
                
                    @staticmethod
                    def Labels() -> typing.Type['Selection']:
                        return Selection
                
                    @staticmethod
                    def Language() -> typing.Type['Language']:
                        return Language
                    NextAnswerId = schemas.IntSchema
                    NextChoiceId = schemas.IntSchema
                    
                    
                    class QuestionDescription(
                        schemas.StrSchema
                    ):
                        pass
                
                    @staticmethod
                    def QuestionID() -> typing.Type['QuestionID']:
                        return QuestionID
                
                    @staticmethod
                    def QuestionText() -> typing.Type['QuestionText']:
                        return QuestionText
                    
                    
                    class QuestionType(
                        schemas.EnumBase,
                        schemas.StrSchema
                    ):
                        
                        @schemas.classproperty
                        def SLIDER(cls):
                            return cls("Slider")
                
                    @staticmethod
                    def RecodeValues() -> typing.Type['RecodeValues']:
                        return RecodeValues
                    
                    
                    class Selector(
                        schemas.EnumBase,
                        schemas.StrSchema
                    ):
                        
                        @schemas.classproperty
                        def HBAR(cls):
                            return cls("HBAR")
                        
                        @schemas.classproperty
                        def HSLIDER(cls):
                            return cls("HSLIDER")
                        
                        @schemas.classproperty
                        def STAR(cls):
                            return cls("STAR")
                
                    @staticmethod
                    def SubSelector() -> typing.Type['QuestionSubSelector']:
                        return QuestionSubSelector
                
                    @staticmethod
                    def Validation() -> typing.Type['Validation']:
                        return Validation
                    __annotations__ = {
                        "ChoiceOrder": ChoiceOrder,
                        "Choices": Choices,
                        "Configuration": Configuration,
                        "DataExportTag": DataExportTag,
                        "Labels": Labels,
                        "Language": Language,
                        "NextAnswerId": NextAnswerId,
                        "NextChoiceId": NextChoiceId,
                        "QuestionDescription": QuestionDescription,
                        "QuestionID": QuestionID,
                        "QuestionText": QuestionText,
                        "QuestionType": QuestionType,
                        "RecodeValues": RecodeValues,
                        "Selector": Selector,
                        "SubSelector": SubSelector,
                        "Validation": Validation,
                    }
                additional_properties = schemas.AnyTypeSchema
            
            Validation: 'Validation'
            ChoiceOrder: 'ChoiceOrder'
            Configuration: 'QuestionConfiguration'
            QuestionType: MetaOapg.properties.QuestionType
            Labels: 'Selection'
            DataExportTag: MetaOapg.properties.DataExportTag
            NextChoiceId: MetaOapg.properties.NextChoiceId
            NextAnswerId: MetaOapg.properties.NextAnswerId
            Choices: 'QuestionChoices'
            Language: 'Language'
            SubSelector: 'QuestionSubSelector'
            QuestionText: 'QuestionText'
            QuestionDescription: MetaOapg.properties.QuestionDescription
            Selector: MetaOapg.properties.Selector
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["Validation"]) -> 'Validation': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["ChoiceOrder"]) -> 'ChoiceOrder': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["Configuration"]) -> 'QuestionConfiguration': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["QuestionType"]) -> MetaOapg.properties.QuestionType: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["Labels"]) -> 'Selection': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["DataExportTag"]) -> MetaOapg.properties.DataExportTag: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["NextChoiceId"]) -> MetaOapg.properties.NextChoiceId: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["NextAnswerId"]) -> MetaOapg.properties.NextAnswerId: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["Choices"]) -> 'QuestionChoices': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["Language"]) -> 'Language': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["SubSelector"]) -> 'QuestionSubSelector': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["QuestionText"]) -> 'QuestionText': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["QuestionDescription"]) -> MetaOapg.properties.QuestionDescription: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["Selector"]) -> MetaOapg.properties.Selector: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["QuestionID"]) -> 'QuestionID': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["RecodeValues"]) -> 'RecodeValues': ...
            
            @typing.overload
            def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["Validation"], typing_extensions.Literal["ChoiceOrder"], typing_extensions.Literal["Configuration"], typing_extensions.Literal["QuestionType"], typing_extensions.Literal["Labels"], typing_extensions.Literal["DataExportTag"], typing_extensions.Literal["NextChoiceId"], typing_extensions.Literal["NextAnswerId"], typing_extensions.Literal["Choices"], typing_extensions.Literal["Language"], typing_extensions.Literal["SubSelector"], typing_extensions.Literal["QuestionText"], typing_extensions.Literal["QuestionDescription"], typing_extensions.Literal["Selector"], typing_extensions.Literal["QuestionID"], typing_extensions.Literal["RecodeValues"], str, ]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["Validation"]) -> 'Validation': ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["ChoiceOrder"]) -> 'ChoiceOrder': ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["Configuration"]) -> 'QuestionConfiguration': ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["QuestionType"]) -> MetaOapg.properties.QuestionType: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["Labels"]) -> 'Selection': ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["DataExportTag"]) -> MetaOapg.properties.DataExportTag: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["NextChoiceId"]) -> MetaOapg.properties.NextChoiceId: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["NextAnswerId"]) -> MetaOapg.properties.NextAnswerId: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["Choices"]) -> 'QuestionChoices': ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["Language"]) -> 'Language': ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["SubSelector"]) -> 'QuestionSubSelector': ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["QuestionText"]) -> 'QuestionText': ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["QuestionDescription"]) -> MetaOapg.properties.QuestionDescription: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["Selector"]) -> MetaOapg.properties.Selector: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["QuestionID"]) -> typing.Union['QuestionID', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["RecodeValues"]) -> typing.Union['RecodeValues', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["Validation"], typing_extensions.Literal["ChoiceOrder"], typing_extensions.Literal["Configuration"], typing_extensions.Literal["QuestionType"], typing_extensions.Literal["Labels"], typing_extensions.Literal["DataExportTag"], typing_extensions.Literal["NextChoiceId"], typing_extensions.Literal["NextAnswerId"], typing_extensions.Literal["Choices"], typing_extensions.Literal["Language"], typing_extensions.Literal["SubSelector"], typing_extensions.Literal["QuestionText"], typing_extensions.Literal["QuestionDescription"], typing_extensions.Literal["Selector"], typing_extensions.Literal["QuestionID"], typing_extensions.Literal["RecodeValues"], str, ]):
                return super().get_item_oapg(name)
        
            def __new__(
                cls,
                *args: typing.Union[dict, frozendict.frozendict, ],
                Validation: 'Validation',
                ChoiceOrder: 'ChoiceOrder',
                Configuration: 'QuestionConfiguration',
                QuestionType: typing.Union[MetaOapg.properties.QuestionType, str, ],
                Labels: 'Selection',
                DataExportTag: typing.Union[MetaOapg.properties.DataExportTag, str, ],
                NextChoiceId: typing.Union[MetaOapg.properties.NextChoiceId, decimal.Decimal, int, ],
                NextAnswerId: typing.Union[MetaOapg.properties.NextAnswerId, decimal.Decimal, int, ],
                Choices: 'QuestionChoices',
                Language: 'Language',
                SubSelector: 'QuestionSubSelector',
                QuestionText: 'QuestionText',
                QuestionDescription: typing.Union[MetaOapg.properties.QuestionDescription, str, ],
                Selector: typing.Union[MetaOapg.properties.Selector, str, ],
                QuestionID: typing.Union['QuestionID', schemas.Unset] = schemas.unset,
                RecodeValues: typing.Union['RecodeValues', schemas.Unset] = schemas.unset,
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
            ) -> 'any_of_3':
                return super().__new__(
                    cls,
                    *args,
                    Validation=Validation,
                    ChoiceOrder=ChoiceOrder,
                    Configuration=Configuration,
                    QuestionType=QuestionType,
                    Labels=Labels,
                    DataExportTag=DataExportTag,
                    NextChoiceId=NextChoiceId,
                    NextAnswerId=NextAnswerId,
                    Choices=Choices,
                    Language=Language,
                    SubSelector=SubSelector,
                    QuestionText=QuestionText,
                    QuestionDescription=QuestionDescription,
                    Selector=Selector,
                    QuestionID=QuestionID,
                    RecodeValues=RecodeValues,
                    _configuration=_configuration,
                    **kwargs,
                )
        
        
        class any_of_4(
            schemas.DictSchema
        ):
        
        
            class MetaOapg:
                required = {
                    "Validation",
                    "Configuration",
                    "Language",
                    "DefaultChoices",
                    "QuestionType",
                    "QuestionText",
                    "DataExportTag",
                    "QuestionDescription",
                    "Selector",
                }
                
                class properties:
                
                    @staticmethod
                    def Configuration() -> typing.Type['QuestionConfiguration']:
                        return QuestionConfiguration
                    DataExportTag = schemas.StrSchema
                    DefaultChoices = schemas.BoolSchema
                
                    @staticmethod
                    def Language() -> typing.Type['Language']:
                        return Language
                    NextAnswerId = schemas.IntSchema
                    NextChoiceId = schemas.IntSchema
                    
                    
                    class QuestionDescription(
                        schemas.StrSchema
                    ):
                        pass
                
                    @staticmethod
                    def QuestionID() -> typing.Type['QuestionID']:
                        return QuestionID
                
                    @staticmethod
                    def QuestionText() -> typing.Type['QuestionText']:
                        return QuestionText
                    
                    
                    class QuestionType(
                        schemas.EnumBase,
                        schemas.StrSchema
                    ):
                        
                        @schemas.classproperty
                        def DB(cls):
                            return cls("DB")
                    
                    
                    class Selector(
                        schemas.EnumBase,
                        schemas.StrSchema
                    ):
                        
                        @schemas.classproperty
                        def TB(cls):
                            return cls("TB")
                
                    @staticmethod
                    def Validation() -> typing.Type['Validation']:
                        return Validation
                    __annotations__ = {
                        "Configuration": Configuration,
                        "DataExportTag": DataExportTag,
                        "DefaultChoices": DefaultChoices,
                        "Language": Language,
                        "NextAnswerId": NextAnswerId,
                        "NextChoiceId": NextChoiceId,
                        "QuestionDescription": QuestionDescription,
                        "QuestionID": QuestionID,
                        "QuestionText": QuestionText,
                        "QuestionType": QuestionType,
                        "Selector": Selector,
                        "Validation": Validation,
                    }
                additional_properties = schemas.AnyTypeSchema
            
            Validation: 'Validation'
            Configuration: 'QuestionConfiguration'
            Language: 'Language'
            DefaultChoices: MetaOapg.properties.DefaultChoices
            QuestionType: MetaOapg.properties.QuestionType
            QuestionText: 'QuestionText'
            DataExportTag: MetaOapg.properties.DataExportTag
            QuestionDescription: MetaOapg.properties.QuestionDescription
            Selector: MetaOapg.properties.Selector
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["Validation"]) -> 'Validation': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["Configuration"]) -> 'QuestionConfiguration': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["Language"]) -> 'Language': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["DefaultChoices"]) -> MetaOapg.properties.DefaultChoices: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["QuestionType"]) -> MetaOapg.properties.QuestionType: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["QuestionText"]) -> 'QuestionText': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["DataExportTag"]) -> MetaOapg.properties.DataExportTag: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["QuestionDescription"]) -> MetaOapg.properties.QuestionDescription: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["Selector"]) -> MetaOapg.properties.Selector: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["NextAnswerId"]) -> MetaOapg.properties.NextAnswerId: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["NextChoiceId"]) -> MetaOapg.properties.NextChoiceId: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["QuestionID"]) -> 'QuestionID': ...
            
            @typing.overload
            def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["Validation"], typing_extensions.Literal["Configuration"], typing_extensions.Literal["Language"], typing_extensions.Literal["DefaultChoices"], typing_extensions.Literal["QuestionType"], typing_extensions.Literal["QuestionText"], typing_extensions.Literal["DataExportTag"], typing_extensions.Literal["QuestionDescription"], typing_extensions.Literal["Selector"], typing_extensions.Literal["NextAnswerId"], typing_extensions.Literal["NextChoiceId"], typing_extensions.Literal["QuestionID"], str, ]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["Validation"]) -> 'Validation': ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["Configuration"]) -> 'QuestionConfiguration': ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["Language"]) -> 'Language': ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["DefaultChoices"]) -> MetaOapg.properties.DefaultChoices: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["QuestionType"]) -> MetaOapg.properties.QuestionType: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["QuestionText"]) -> 'QuestionText': ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["DataExportTag"]) -> MetaOapg.properties.DataExportTag: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["QuestionDescription"]) -> MetaOapg.properties.QuestionDescription: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["Selector"]) -> MetaOapg.properties.Selector: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["NextAnswerId"]) -> typing.Union[MetaOapg.properties.NextAnswerId, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["NextChoiceId"]) -> typing.Union[MetaOapg.properties.NextChoiceId, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["QuestionID"]) -> typing.Union['QuestionID', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["Validation"], typing_extensions.Literal["Configuration"], typing_extensions.Literal["Language"], typing_extensions.Literal["DefaultChoices"], typing_extensions.Literal["QuestionType"], typing_extensions.Literal["QuestionText"], typing_extensions.Literal["DataExportTag"], typing_extensions.Literal["QuestionDescription"], typing_extensions.Literal["Selector"], typing_extensions.Literal["NextAnswerId"], typing_extensions.Literal["NextChoiceId"], typing_extensions.Literal["QuestionID"], str, ]):
                return super().get_item_oapg(name)
        
            def __new__(
                cls,
                *args: typing.Union[dict, frozendict.frozendict, ],
                Validation: 'Validation',
                Configuration: 'QuestionConfiguration',
                Language: 'Language',
                DefaultChoices: typing.Union[MetaOapg.properties.DefaultChoices, bool, ],
                QuestionType: typing.Union[MetaOapg.properties.QuestionType, str, ],
                QuestionText: 'QuestionText',
                DataExportTag: typing.Union[MetaOapg.properties.DataExportTag, str, ],
                QuestionDescription: typing.Union[MetaOapg.properties.QuestionDescription, str, ],
                Selector: typing.Union[MetaOapg.properties.Selector, str, ],
                NextAnswerId: typing.Union[MetaOapg.properties.NextAnswerId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                NextChoiceId: typing.Union[MetaOapg.properties.NextChoiceId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                QuestionID: typing.Union['QuestionID', schemas.Unset] = schemas.unset,
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
            ) -> 'any_of_4':
                return super().__new__(
                    cls,
                    *args,
                    Validation=Validation,
                    Configuration=Configuration,
                    Language=Language,
                    DefaultChoices=DefaultChoices,
                    QuestionType=QuestionType,
                    QuestionText=QuestionText,
                    DataExportTag=DataExportTag,
                    QuestionDescription=QuestionDescription,
                    Selector=Selector,
                    NextAnswerId=NextAnswerId,
                    NextChoiceId=NextChoiceId,
                    QuestionID=QuestionID,
                    _configuration=_configuration,
                    **kwargs,
                )
        
        
        class any_of_5(
            schemas.DictSchema
        ):
        
        
            class MetaOapg:
                required = {
                    "Graphics",
                    "Validation",
                    "Configuration",
                    "Language",
                    "DefaultChoices",
                    "GraphicsDescription",
                    "QuestionType",
                    "QuestionText",
                    "DataExportTag",
                    "QuestionDescription",
                    "Selector",
                }
                
                class properties:
                
                    @staticmethod
                    def Configuration() -> typing.Type['QuestionConfiguration']:
                        return QuestionConfiguration
                    DataExportTag = schemas.StrSchema
                    DefaultChoices = schemas.BoolSchema
                
                    @staticmethod
                    def Graphics() -> typing.Type['ImageID']:
                        return ImageID
                    
                    
                    class GraphicsDescription(
                        schemas.StrSchema
                    ):
                        pass
                
                    @staticmethod
                    def Language() -> typing.Type['Language']:
                        return Language
                    NextAnswerId = schemas.IntSchema
                    NextChoiceId = schemas.IntSchema
                    
                    
                    class QuestionDescription(
                        schemas.StrSchema
                    ):
                        pass
                
                    @staticmethod
                    def QuestionID() -> typing.Type['QuestionID']:
                        return QuestionID
                
                    @staticmethod
                    def QuestionText() -> typing.Type['QuestionText']:
                        return QuestionText
                    
                    
                    class QuestionType(
                        schemas.EnumBase,
                        schemas.StrSchema
                    ):
                        
                        @schemas.classproperty
                        def DB(cls):
                            return cls("DB")
                    
                    
                    class Selector(
                        schemas.EnumBase,
                        schemas.StrSchema
                    ):
                        
                        @schemas.classproperty
                        def GRB(cls):
                            return cls("GRB")
                
                    @staticmethod
                    def Validation() -> typing.Type['Validation']:
                        return Validation
                    __annotations__ = {
                        "Configuration": Configuration,
                        "DataExportTag": DataExportTag,
                        "DefaultChoices": DefaultChoices,
                        "Graphics": Graphics,
                        "GraphicsDescription": GraphicsDescription,
                        "Language": Language,
                        "NextAnswerId": NextAnswerId,
                        "NextChoiceId": NextChoiceId,
                        "QuestionDescription": QuestionDescription,
                        "QuestionID": QuestionID,
                        "QuestionText": QuestionText,
                        "QuestionType": QuestionType,
                        "Selector": Selector,
                        "Validation": Validation,
                    }
                additional_properties = schemas.AnyTypeSchema
            
            Graphics: 'ImageID'
            Validation: 'Validation'
            Configuration: 'QuestionConfiguration'
            Language: 'Language'
            DefaultChoices: MetaOapg.properties.DefaultChoices
            GraphicsDescription: MetaOapg.properties.GraphicsDescription
            QuestionType: MetaOapg.properties.QuestionType
            QuestionText: 'QuestionText'
            DataExportTag: MetaOapg.properties.DataExportTag
            QuestionDescription: MetaOapg.properties.QuestionDescription
            Selector: MetaOapg.properties.Selector
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["Graphics"]) -> 'ImageID': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["Validation"]) -> 'Validation': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["Configuration"]) -> 'QuestionConfiguration': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["Language"]) -> 'Language': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["DefaultChoices"]) -> MetaOapg.properties.DefaultChoices: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["GraphicsDescription"]) -> MetaOapg.properties.GraphicsDescription: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["QuestionType"]) -> MetaOapg.properties.QuestionType: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["QuestionText"]) -> 'QuestionText': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["DataExportTag"]) -> MetaOapg.properties.DataExportTag: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["QuestionDescription"]) -> MetaOapg.properties.QuestionDescription: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["Selector"]) -> MetaOapg.properties.Selector: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["NextAnswerId"]) -> MetaOapg.properties.NextAnswerId: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["NextChoiceId"]) -> MetaOapg.properties.NextChoiceId: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["QuestionID"]) -> 'QuestionID': ...
            
            @typing.overload
            def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["Graphics"], typing_extensions.Literal["Validation"], typing_extensions.Literal["Configuration"], typing_extensions.Literal["Language"], typing_extensions.Literal["DefaultChoices"], typing_extensions.Literal["GraphicsDescription"], typing_extensions.Literal["QuestionType"], typing_extensions.Literal["QuestionText"], typing_extensions.Literal["DataExportTag"], typing_extensions.Literal["QuestionDescription"], typing_extensions.Literal["Selector"], typing_extensions.Literal["NextAnswerId"], typing_extensions.Literal["NextChoiceId"], typing_extensions.Literal["QuestionID"], str, ]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["Graphics"]) -> 'ImageID': ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["Validation"]) -> 'Validation': ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["Configuration"]) -> 'QuestionConfiguration': ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["Language"]) -> 'Language': ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["DefaultChoices"]) -> MetaOapg.properties.DefaultChoices: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["GraphicsDescription"]) -> MetaOapg.properties.GraphicsDescription: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["QuestionType"]) -> MetaOapg.properties.QuestionType: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["QuestionText"]) -> 'QuestionText': ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["DataExportTag"]) -> MetaOapg.properties.DataExportTag: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["QuestionDescription"]) -> MetaOapg.properties.QuestionDescription: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["Selector"]) -> MetaOapg.properties.Selector: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["NextAnswerId"]) -> typing.Union[MetaOapg.properties.NextAnswerId, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["NextChoiceId"]) -> typing.Union[MetaOapg.properties.NextChoiceId, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["QuestionID"]) -> typing.Union['QuestionID', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["Graphics"], typing_extensions.Literal["Validation"], typing_extensions.Literal["Configuration"], typing_extensions.Literal["Language"], typing_extensions.Literal["DefaultChoices"], typing_extensions.Literal["GraphicsDescription"], typing_extensions.Literal["QuestionType"], typing_extensions.Literal["QuestionText"], typing_extensions.Literal["DataExportTag"], typing_extensions.Literal["QuestionDescription"], typing_extensions.Literal["Selector"], typing_extensions.Literal["NextAnswerId"], typing_extensions.Literal["NextChoiceId"], typing_extensions.Literal["QuestionID"], str, ]):
                return super().get_item_oapg(name)
        
            def __new__(
                cls,
                *args: typing.Union[dict, frozendict.frozendict, ],
                Graphics: 'ImageID',
                Validation: 'Validation',
                Configuration: 'QuestionConfiguration',
                Language: 'Language',
                DefaultChoices: typing.Union[MetaOapg.properties.DefaultChoices, bool, ],
                GraphicsDescription: typing.Union[MetaOapg.properties.GraphicsDescription, str, ],
                QuestionType: typing.Union[MetaOapg.properties.QuestionType, str, ],
                QuestionText: 'QuestionText',
                DataExportTag: typing.Union[MetaOapg.properties.DataExportTag, str, ],
                QuestionDescription: typing.Union[MetaOapg.properties.QuestionDescription, str, ],
                Selector: typing.Union[MetaOapg.properties.Selector, str, ],
                NextAnswerId: typing.Union[MetaOapg.properties.NextAnswerId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                NextChoiceId: typing.Union[MetaOapg.properties.NextChoiceId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                QuestionID: typing.Union['QuestionID', schemas.Unset] = schemas.unset,
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
            ) -> 'any_of_5':
                return super().__new__(
                    cls,
                    *args,
                    Graphics=Graphics,
                    Validation=Validation,
                    Configuration=Configuration,
                    Language=Language,
                    DefaultChoices=DefaultChoices,
                    GraphicsDescription=GraphicsDescription,
                    QuestionType=QuestionType,
                    QuestionText=QuestionText,
                    DataExportTag=DataExportTag,
                    QuestionDescription=QuestionDescription,
                    Selector=Selector,
                    NextAnswerId=NextAnswerId,
                    NextChoiceId=NextChoiceId,
                    QuestionID=QuestionID,
                    _configuration=_configuration,
                    **kwargs,
                )
        
        @classmethod
        @functools.lru_cache()
        def any_of(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return [
                cls.any_of_0,
                cls.any_of_1,
                cls.any_of_2,
                cls.any_of_3,
                cls.any_of_4,
                cls.any_of_5,
            ]


    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'QuestionDefinition':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
            **kwargs,
        )

from qualtrics_survey_python_sdk.model.answer_randomization import AnswerRandomization
from qualtrics_survey_python_sdk.model.choice_order import ChoiceOrder
from qualtrics_survey_python_sdk.model.image_id import ImageID
from qualtrics_survey_python_sdk.model.language import Language
from qualtrics_survey_python_sdk.model.question_choices import QuestionChoices
from qualtrics_survey_python_sdk.model.question_configuration import QuestionConfiguration
from qualtrics_survey_python_sdk.model.question_id import QuestionID
from qualtrics_survey_python_sdk.model.question_sub_selector import QuestionSubSelector
from qualtrics_survey_python_sdk.model.question_text import QuestionText
from qualtrics_survey_python_sdk.model.question_type import QuestionType
from qualtrics_survey_python_sdk.model.randomization import Randomization
from qualtrics_survey_python_sdk.model.recode_values import RecodeValues
from qualtrics_survey_python_sdk.model.selection import Selection
from qualtrics_survey_python_sdk.model.validation import Validation
