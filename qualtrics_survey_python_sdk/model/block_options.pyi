# coding: utf-8

"""
    Qualtrics Survey API

    The Qualtrics Survey endpoints give you access to the structure of the surveys you create.   Surveys have a complex structure, and you are encouraged to become familiar with the structure using your brand's Qualtrics page to build surveys at first. Then you can query those surveys using these endpoints.   Once you are familiar, you can use this API to create surveys on the fly, or modify existing surveys in your library. 

    The version of the OpenAPI document: 3.0.0
    Created by: https://www.qualtrics.com/support/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from qualtrics_survey_python_sdk import schemas  # noqa: F401


class BlockOptions(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            
            
            class BlockLocking(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def TRUE(cls):
                    return cls("true")
                
                @schemas.classproperty
                def FALSE(cls):
                    return cls("false")
            BlockPassword = schemas.StrSchema
            
            
            class BlockVisiblity(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def COLLAPSED(cls):
                    return cls("Collapsed")
                
                @schemas.classproperty
                def EXPANDED(cls):
                    return cls("Expanded")
            
            
            class RandomizeQuestions(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def FALSE(cls):
                    return cls("false")
                
                @schemas.classproperty
                def RANDOM_WITH_XPER_PAGE(cls):
                    return cls("RandomWithXPerPage")
                
                @schemas.classproperty
                def RANDOM_WITH_ONLY_X(cls):
                    return cls("RandomWithOnlyX")
                
                @schemas.classproperty
                def ADVANCED(cls):
                    return cls("Advanced")
            
            
            class Looping(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def NONE(cls):
                    return cls("None")
                
                @schemas.classproperty
                def STATIC(cls):
                    return cls("Static")
                
                @schemas.classproperty
                def QUESTION(cls):
                    return cls("Question")
        
            @staticmethod
            def LoopingOptions() -> typing.Type['BlockOptionsLoopingOptions']:
                return BlockOptionsLoopingOptions
            
            
            class Randomization(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        
                        
                        class Advanced(
                            schemas.DictSchema
                        ):
                        
                        
                            class MetaOapg:
                                required = {
                                    "QuestionsPerPage",
                                }
                                
                                class properties:
                                
                                    @staticmethod
                                    def QuestionsPerPage() -> typing.Type['QuestionsPerPage']:
                                        return QuestionsPerPage
                                    
                                    
                                    class FixedOrder(
                                        schemas.ListSchema
                                    ):
                                    
                                    
                                        class MetaOapg:
                                            
                                            @staticmethod
                                            def items() -> typing.Type['RandomizationElement']:
                                                return RandomizationElement
                                    
                                        def __new__(
                                            cls,
                                            arg: typing.Union[typing.Tuple['RandomizationElement'], typing.List['RandomizationElement']],
                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                        ) -> 'FixedOrder':
                                            return super().__new__(
                                                cls,
                                                arg,
                                                _configuration=_configuration,
                                            )
                                    
                                        def __getitem__(self, i: int) -> 'RandomizationElement':
                                            return super().__getitem__(i)
                                    
                                    
                                    class RandomizeAll(
                                        schemas.ListSchema
                                    ):
                                    
                                    
                                        class MetaOapg:
                                            
                                            @staticmethod
                                            def items() -> typing.Type['RandomizationElement']:
                                                return RandomizationElement
                                    
                                        def __new__(
                                            cls,
                                            arg: typing.Union[typing.Tuple['RandomizationElement'], typing.List['RandomizationElement']],
                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                        ) -> 'RandomizeAll':
                                            return super().__new__(
                                                cls,
                                                arg,
                                                _configuration=_configuration,
                                            )
                                    
                                        def __getitem__(self, i: int) -> 'RandomizationElement':
                                            return super().__getitem__(i)
                                    
                                    
                                    class RandomSubSet(
                                        schemas.ListSchema
                                    ):
                                    
                                    
                                        class MetaOapg:
                                            
                                            @staticmethod
                                            def items() -> typing.Type['RandomizationElement']:
                                                return RandomizationElement
                                    
                                        def __new__(
                                            cls,
                                            arg: typing.Union[typing.Tuple['RandomizationElement'], typing.List['RandomizationElement']],
                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                        ) -> 'RandomSubSet':
                                            return super().__new__(
                                                cls,
                                                arg,
                                                _configuration=_configuration,
                                            )
                                    
                                        def __getitem__(self, i: int) -> 'RandomizationElement':
                                            return super().__getitem__(i)
                                    
                                    
                                    class TotalRandSubset(
                                        schemas.StrSchema
                                    ):
                                        pass
                                    
                                    
                                    class Undisplayed(
                                        schemas.ListSchema
                                    ):
                                    
                                    
                                        class MetaOapg:
                                            
                                            @staticmethod
                                            def items() -> typing.Type['RandomizationElement']:
                                                return RandomizationElement
                                    
                                        def __new__(
                                            cls,
                                            arg: typing.Union[typing.Tuple['RandomizationElement'], typing.List['RandomizationElement']],
                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                        ) -> 'Undisplayed':
                                            return super().__new__(
                                                cls,
                                                arg,
                                                _configuration=_configuration,
                                            )
                                    
                                        def __getitem__(self, i: int) -> 'RandomizationElement':
                                            return super().__getitem__(i)
                                    __annotations__ = {
                                        "QuestionsPerPage": QuestionsPerPage,
                                        "FixedOrder": FixedOrder,
                                        "RandomizeAll": RandomizeAll,
                                        "RandomSubSet": RandomSubSet,
                                        "TotalRandSubset": TotalRandSubset,
                                        "Undisplayed": Undisplayed,
                                    }
                                additional_properties = schemas.AnyTypeSchema
                            
                            QuestionsPerPage: 'QuestionsPerPage'
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["QuestionsPerPage"]) -> 'QuestionsPerPage': ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["FixedOrder"]) -> MetaOapg.properties.FixedOrder: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["RandomizeAll"]) -> MetaOapg.properties.RandomizeAll: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["RandomSubSet"]) -> MetaOapg.properties.RandomSubSet: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["TotalRandSubset"]) -> MetaOapg.properties.TotalRandSubset: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["Undisplayed"]) -> MetaOapg.properties.Undisplayed: ...
                            
                            @typing.overload
                            def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
                            
                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["QuestionsPerPage"], typing_extensions.Literal["FixedOrder"], typing_extensions.Literal["RandomizeAll"], typing_extensions.Literal["RandomSubSet"], typing_extensions.Literal["TotalRandSubset"], typing_extensions.Literal["Undisplayed"], str, ]):
                                # dict_instance[name] accessor
                                return super().__getitem__(name)
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["QuestionsPerPage"]) -> 'QuestionsPerPage': ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["FixedOrder"]) -> typing.Union[MetaOapg.properties.FixedOrder, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["RandomizeAll"]) -> typing.Union[MetaOapg.properties.RandomizeAll, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["RandomSubSet"]) -> typing.Union[MetaOapg.properties.RandomSubSet, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["TotalRandSubset"]) -> typing.Union[MetaOapg.properties.TotalRandSubset, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["Undisplayed"]) -> typing.Union[MetaOapg.properties.Undisplayed, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
                            
                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["QuestionsPerPage"], typing_extensions.Literal["FixedOrder"], typing_extensions.Literal["RandomizeAll"], typing_extensions.Literal["RandomSubSet"], typing_extensions.Literal["TotalRandSubset"], typing_extensions.Literal["Undisplayed"], str, ]):
                                return super().get_item_oapg(name)
                        
                            def __new__(
                                cls,
                                *args: typing.Union[dict, frozendict.frozendict, ],
                                QuestionsPerPage: 'QuestionsPerPage',
                                FixedOrder: typing.Union[MetaOapg.properties.FixedOrder, list, tuple, schemas.Unset] = schemas.unset,
                                RandomizeAll: typing.Union[MetaOapg.properties.RandomizeAll, list, tuple, schemas.Unset] = schemas.unset,
                                RandomSubSet: typing.Union[MetaOapg.properties.RandomSubSet, list, tuple, schemas.Unset] = schemas.unset,
                                TotalRandSubset: typing.Union[MetaOapg.properties.TotalRandSubset, str, schemas.Unset] = schemas.unset,
                                Undisplayed: typing.Union[MetaOapg.properties.Undisplayed, list, tuple, schemas.Unset] = schemas.unset,
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                            ) -> 'Advanced':
                                return super().__new__(
                                    cls,
                                    *args,
                                    QuestionsPerPage=QuestionsPerPage,
                                    FixedOrder=FixedOrder,
                                    RandomizeAll=RandomizeAll,
                                    RandomSubSet=RandomSubSet,
                                    TotalRandSubset=TotalRandSubset,
                                    Undisplayed=Undisplayed,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                        EvenPresentation = schemas.BoolSchema
                        __annotations__ = {
                            "Advanced": Advanced,
                            "EvenPresentation": EvenPresentation,
                        }
                    additional_properties = schemas.AnyTypeSchema
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["Advanced"]) -> MetaOapg.properties.Advanced: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["EvenPresentation"]) -> MetaOapg.properties.EvenPresentation: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["Advanced"], typing_extensions.Literal["EvenPresentation"], str, ]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["Advanced"]) -> typing.Union[MetaOapg.properties.Advanced, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["EvenPresentation"]) -> typing.Union[MetaOapg.properties.EvenPresentation, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["Advanced"], typing_extensions.Literal["EvenPresentation"], str, ]):
                    return super().get_item_oapg(name)
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, ],
                    Advanced: typing.Union[MetaOapg.properties.Advanced, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                    EvenPresentation: typing.Union[MetaOapg.properties.EvenPresentation, bool, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                ) -> 'Randomization':
                    return super().__new__(
                        cls,
                        *args,
                        Advanced=Advanced,
                        EvenPresentation=EvenPresentation,
                        _configuration=_configuration,
                        **kwargs,
                    )
            NextButton = schemas.StrSchema
            PreviousButton = schemas.StrSchema
        
            @staticmethod
            def nextButtonLibraryID() -> typing.Type['LibraryID']:
                return LibraryID
        
            @staticmethod
            def nextButtonMID() -> typing.Type['MessageID']:
                return MessageID
        
            @staticmethod
            def previousButtonLibraryID() -> typing.Type['MessageID']:
                return MessageID
            __annotations__ = {
                "BlockLocking": BlockLocking,
                "BlockPassword": BlockPassword,
                "BlockVisiblity": BlockVisiblity,
                "RandomizeQuestions": RandomizeQuestions,
                "Looping": Looping,
                "LoopingOptions": LoopingOptions,
                "Randomization": Randomization,
                "NextButton": NextButton,
                "PreviousButton": PreviousButton,
                "nextButtonLibraryID": nextButtonLibraryID,
                "nextButtonMID": nextButtonMID,
                "previousButtonLibraryID": previousButtonLibraryID,
            }
        additional_properties = schemas.AnyTypeSchema
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["BlockLocking"]) -> MetaOapg.properties.BlockLocking: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["BlockPassword"]) -> MetaOapg.properties.BlockPassword: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["BlockVisiblity"]) -> MetaOapg.properties.BlockVisiblity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["RandomizeQuestions"]) -> MetaOapg.properties.RandomizeQuestions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Looping"]) -> MetaOapg.properties.Looping: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["LoopingOptions"]) -> 'BlockOptionsLoopingOptions': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Randomization"]) -> MetaOapg.properties.Randomization: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["NextButton"]) -> MetaOapg.properties.NextButton: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["PreviousButton"]) -> MetaOapg.properties.PreviousButton: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nextButtonLibraryID"]) -> 'LibraryID': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nextButtonMID"]) -> 'MessageID': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["previousButtonLibraryID"]) -> 'MessageID': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["BlockLocking"], typing_extensions.Literal["BlockPassword"], typing_extensions.Literal["BlockVisiblity"], typing_extensions.Literal["RandomizeQuestions"], typing_extensions.Literal["Looping"], typing_extensions.Literal["LoopingOptions"], typing_extensions.Literal["Randomization"], typing_extensions.Literal["NextButton"], typing_extensions.Literal["PreviousButton"], typing_extensions.Literal["nextButtonLibraryID"], typing_extensions.Literal["nextButtonMID"], typing_extensions.Literal["previousButtonLibraryID"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["BlockLocking"]) -> typing.Union[MetaOapg.properties.BlockLocking, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["BlockPassword"]) -> typing.Union[MetaOapg.properties.BlockPassword, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["BlockVisiblity"]) -> typing.Union[MetaOapg.properties.BlockVisiblity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["RandomizeQuestions"]) -> typing.Union[MetaOapg.properties.RandomizeQuestions, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Looping"]) -> typing.Union[MetaOapg.properties.Looping, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["LoopingOptions"]) -> typing.Union['BlockOptionsLoopingOptions', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Randomization"]) -> typing.Union[MetaOapg.properties.Randomization, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["NextButton"]) -> typing.Union[MetaOapg.properties.NextButton, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["PreviousButton"]) -> typing.Union[MetaOapg.properties.PreviousButton, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nextButtonLibraryID"]) -> typing.Union['LibraryID', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nextButtonMID"]) -> typing.Union['MessageID', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["previousButtonLibraryID"]) -> typing.Union['MessageID', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["BlockLocking"], typing_extensions.Literal["BlockPassword"], typing_extensions.Literal["BlockVisiblity"], typing_extensions.Literal["RandomizeQuestions"], typing_extensions.Literal["Looping"], typing_extensions.Literal["LoopingOptions"], typing_extensions.Literal["Randomization"], typing_extensions.Literal["NextButton"], typing_extensions.Literal["PreviousButton"], typing_extensions.Literal["nextButtonLibraryID"], typing_extensions.Literal["nextButtonMID"], typing_extensions.Literal["previousButtonLibraryID"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        BlockLocking: typing.Union[MetaOapg.properties.BlockLocking, str, schemas.Unset] = schemas.unset,
        BlockPassword: typing.Union[MetaOapg.properties.BlockPassword, str, schemas.Unset] = schemas.unset,
        BlockVisiblity: typing.Union[MetaOapg.properties.BlockVisiblity, str, schemas.Unset] = schemas.unset,
        RandomizeQuestions: typing.Union[MetaOapg.properties.RandomizeQuestions, str, schemas.Unset] = schemas.unset,
        Looping: typing.Union[MetaOapg.properties.Looping, str, schemas.Unset] = schemas.unset,
        LoopingOptions: typing.Union['BlockOptionsLoopingOptions', schemas.Unset] = schemas.unset,
        Randomization: typing.Union[MetaOapg.properties.Randomization, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        NextButton: typing.Union[MetaOapg.properties.NextButton, str, schemas.Unset] = schemas.unset,
        PreviousButton: typing.Union[MetaOapg.properties.PreviousButton, str, schemas.Unset] = schemas.unset,
        nextButtonLibraryID: typing.Union['LibraryID', schemas.Unset] = schemas.unset,
        nextButtonMID: typing.Union['MessageID', schemas.Unset] = schemas.unset,
        previousButtonLibraryID: typing.Union['MessageID', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'BlockOptions':
        return super().__new__(
            cls,
            *args,
            BlockLocking=BlockLocking,
            BlockPassword=BlockPassword,
            BlockVisiblity=BlockVisiblity,
            RandomizeQuestions=RandomizeQuestions,
            Looping=Looping,
            LoopingOptions=LoopingOptions,
            Randomization=Randomization,
            NextButton=NextButton,
            PreviousButton=PreviousButton,
            nextButtonLibraryID=nextButtonLibraryID,
            nextButtonMID=nextButtonMID,
            previousButtonLibraryID=previousButtonLibraryID,
            _configuration=_configuration,
            **kwargs,
        )

from qualtrics_survey_python_sdk.model.block_options_looping_options import BlockOptionsLoopingOptions
from qualtrics_survey_python_sdk.model.library_id import LibraryID
from qualtrics_survey_python_sdk.model.message_id import MessageID
from qualtrics_survey_python_sdk.model.questions_per_page import QuestionsPerPage
from qualtrics_survey_python_sdk.model.randomization_element import RandomizationElement
