# coding: utf-8

"""
    Qualtrics Survey API

    The Qualtrics Survey endpoints give you access to the structure of the surveys you create.   Surveys have a complex structure, and you are encouraged to become familiar with the structure using your brand's Qualtrics page to build surveys at first. Then you can query those surveys using these endpoints.   Once you are familiar, you can use this API to create surveys on the fly, or modify existing surveys in your library. 

    The version of the OpenAPI document: 3.0.0
    Created by: https://www.qualtrics.com/support/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from qualtrics_survey_python_sdk import schemas  # noqa: F401


class EmbeddedDataFlowElementEmbeddedDataItem(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "Field",
            "Type",
            "Description",
        }
        
        class properties:
            
            
            class Description(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 100
            
            
            class Type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "Recipient": "RECIPIENT",
                        "Custom": "CUSTOM",
                        "EmbeddedData": "EMBEDDED_DATA",
                    }
                
                @schemas.classproperty
                def RECIPIENT(cls):
                    return cls("Recipient")
                
                @schemas.classproperty
                def CUSTOM(cls):
                    return cls("Custom")
                
                @schemas.classproperty
                def EMBEDDED_DATA(cls):
                    return cls("EmbeddedData")
            
            
            class Field(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 100
            
            
            class VariableType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "Nominal": "NOMINAL",
                        "MultiValueNominal": "MULTI_VALUE_NOMINAL",
                        "Ordinal": "ORDINAL",
                        "Scale": "SCALE",
                        "String": "STRING",
                        "Date": "DATE",
                        "FilterOnly": "FILTER_ONLY",
                        "Filter Only": "FILTER_ONLY",
                    }
                
                @schemas.classproperty
                def NOMINAL(cls):
                    return cls("Nominal")
                
                @schemas.classproperty
                def MULTI_VALUE_NOMINAL(cls):
                    return cls("MultiValueNominal")
                
                @schemas.classproperty
                def ORDINAL(cls):
                    return cls("Ordinal")
                
                @schemas.classproperty
                def SCALE(cls):
                    return cls("Scale")
                
                @schemas.classproperty
                def STRING(cls):
                    return cls("String")
                
                @schemas.classproperty
                def DATE(cls):
                    return cls("Date")
                
                @schemas.classproperty
                def FILTER_ONLY(cls):
                    return cls("FilterOnly")
                
                @schemas.classproperty
                def FILTER_ONLY(cls):
                    return cls("Filter Only")
        
            @staticmethod
            def DataVisibility() -> typing.Type['EmbeddedDataFlowElementEmbeddedDataItemDataVisibility']:
                return EmbeddedDataFlowElementEmbeddedDataItemDataVisibility
            AnalyzeText = schemas.BoolSchema
            
            
            class Value(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 100
            __annotations__ = {
                "Description": Description,
                "Type": Type,
                "Field": Field,
                "VariableType": VariableType,
                "DataVisibility": DataVisibility,
                "AnalyzeText": AnalyzeText,
                "Value": Value,
            }
        additional_properties = schemas.AnyTypeSchema
    
    Field: MetaOapg.properties.Field
    Type: MetaOapg.properties.Type
    Description: MetaOapg.properties.Description
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Field"]) -> MetaOapg.properties.Field: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Type"]) -> MetaOapg.properties.Type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Description"]) -> MetaOapg.properties.Description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["VariableType"]) -> MetaOapg.properties.VariableType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["DataVisibility"]) -> 'EmbeddedDataFlowElementEmbeddedDataItemDataVisibility': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["AnalyzeText"]) -> MetaOapg.properties.AnalyzeText: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Value"]) -> MetaOapg.properties.Value: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["Field"], typing_extensions.Literal["Type"], typing_extensions.Literal["Description"], typing_extensions.Literal["VariableType"], typing_extensions.Literal["DataVisibility"], typing_extensions.Literal["AnalyzeText"], typing_extensions.Literal["Value"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Field"]) -> MetaOapg.properties.Field: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Type"]) -> MetaOapg.properties.Type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Description"]) -> MetaOapg.properties.Description: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["VariableType"]) -> typing.Union[MetaOapg.properties.VariableType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["DataVisibility"]) -> typing.Union['EmbeddedDataFlowElementEmbeddedDataItemDataVisibility', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["AnalyzeText"]) -> typing.Union[MetaOapg.properties.AnalyzeText, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Value"]) -> typing.Union[MetaOapg.properties.Value, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["Field"], typing_extensions.Literal["Type"], typing_extensions.Literal["Description"], typing_extensions.Literal["VariableType"], typing_extensions.Literal["DataVisibility"], typing_extensions.Literal["AnalyzeText"], typing_extensions.Literal["Value"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        Field: typing.Union[MetaOapg.properties.Field, str, ],
        Type: typing.Union[MetaOapg.properties.Type, str, ],
        Description: typing.Union[MetaOapg.properties.Description, str, ],
        VariableType: typing.Union[MetaOapg.properties.VariableType, str, schemas.Unset] = schemas.unset,
        DataVisibility: typing.Union['EmbeddedDataFlowElementEmbeddedDataItemDataVisibility', schemas.Unset] = schemas.unset,
        AnalyzeText: typing.Union[MetaOapg.properties.AnalyzeText, bool, schemas.Unset] = schemas.unset,
        Value: typing.Union[MetaOapg.properties.Value, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'EmbeddedDataFlowElementEmbeddedDataItem':
        return super().__new__(
            cls,
            *args,
            Field=Field,
            Type=Type,
            Description=Description,
            VariableType=VariableType,
            DataVisibility=DataVisibility,
            AnalyzeText=AnalyzeText,
            Value=Value,
            _configuration=_configuration,
            **kwargs,
        )

from qualtrics_survey_python_sdk.model.embedded_data_flow_element_embedded_data_item_data_visibility import EmbeddedDataFlowElementEmbeddedDataItemDataVisibility
