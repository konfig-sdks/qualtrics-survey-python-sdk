# coding: utf-8

"""
    Qualtrics Survey API

    The Qualtrics Survey endpoints give you access to the structure of the surveys you create.   Surveys have a complex structure, and you are encouraged to become familiar with the structure using your brand's Qualtrics page to build surveys at first. Then you can query those surveys using these endpoints.   Once you are familiar, you can use this API to create surveys on the fly, or modify existing surveys in your library. 

    The version of the OpenAPI document: 3.0.0
    Created by: https://www.qualtrics.com/support/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from qualtrics_survey_python_sdk import schemas  # noqa: F401


class FlowDefinition(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "FlowID",
            "Type",
            "Properties",
            "Flow",
        }
        
        class properties:
        
            @staticmethod
            def FlowID() -> typing.Type['FlowID']:
                return FlowID
        
            @staticmethod
            def Type() -> typing.Type['FlowType']:
                return FlowType
        
            @staticmethod
            def Flow() -> typing.Type['Flow']:
                return Flow
        
            @staticmethod
            def Properties() -> typing.Type['FlowProperties']:
                return FlowProperties
            __annotations__ = {
                "FlowID": FlowID,
                "Type": Type,
                "Flow": Flow,
                "Properties": Properties,
            }
        additional_properties = schemas.AnyTypeSchema
    
    FlowID: 'FlowID'
    Type: 'FlowType'
    Properties: 'FlowProperties'
    Flow: 'Flow'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["FlowID"]) -> 'FlowID': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Type"]) -> 'FlowType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Properties"]) -> 'FlowProperties': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Flow"]) -> 'Flow': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["FlowID"], typing_extensions.Literal["Type"], typing_extensions.Literal["Properties"], typing_extensions.Literal["Flow"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["FlowID"]) -> 'FlowID': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Type"]) -> 'FlowType': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Properties"]) -> 'FlowProperties': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Flow"]) -> 'Flow': ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["FlowID"], typing_extensions.Literal["Type"], typing_extensions.Literal["Properties"], typing_extensions.Literal["Flow"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        FlowID: 'FlowID',
        Type: 'FlowType',
        Properties: 'FlowProperties',
        Flow: 'Flow',
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'FlowDefinition':
        return super().__new__(
            cls,
            *args,
            FlowID=FlowID,
            Type=Type,
            Properties=Properties,
            Flow=Flow,
            _configuration=_configuration,
            **kwargs,
        )

from qualtrics_survey_python_sdk.model.flow import Flow
from qualtrics_survey_python_sdk.model.flow_id import FlowID
from qualtrics_survey_python_sdk.model.flow_properties import FlowProperties
from qualtrics_survey_python_sdk.model.flow_type import FlowType
