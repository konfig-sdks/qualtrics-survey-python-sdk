# coding: utf-8

"""
    Qualtrics Survey API

    The Qualtrics Survey endpoints give you access to the structure of the surveys you create.   Surveys have a complex structure, and you are encouraged to become familiar with the structure using your brand's Qualtrics page to build surveys at first. Then you can query those surveys using these endpoints.   Once you are familiar, you can use this API to create surveys on the fly, or modify existing surveys in your library. 

    The version of the OpenAPI document: 3.0.0
    Created by: https://www.qualtrics.com/support/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from qualtrics_survey_python_sdk import schemas  # noqa: F401


class CustomLanguages(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    The custom languages the survey supports.
    """


    class MetaOapg:
        
        
        class additional_properties(
            schemas.DictSchema
        ):
        
        
            class MetaOapg:
                required = {
                    "ErrorMessages",
                    "DisplayName",
                }
                
                class properties:
                    DisplayName = schemas.StrSchema
                    ErrorMessages = schemas.StrSchema
                    __annotations__ = {
                        "DisplayName": DisplayName,
                        "ErrorMessages": ErrorMessages,
                    }
            
            ErrorMessages: MetaOapg.properties.ErrorMessages
            DisplayName: MetaOapg.properties.DisplayName
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["DisplayName"]) -> MetaOapg.properties.DisplayName: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["ErrorMessages"]) -> MetaOapg.properties.ErrorMessages: ...
            
            @typing.overload
            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["DisplayName", "ErrorMessages", ], str]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["DisplayName"]) -> MetaOapg.properties.DisplayName: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["ErrorMessages"]) -> MetaOapg.properties.ErrorMessages: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["DisplayName", "ErrorMessages", ], str]):
                return super().get_item_oapg(name)
            
        
            def __new__(
                cls,
                *args: typing.Union[dict, frozendict.frozendict, ],
                ErrorMessages: typing.Union[MetaOapg.properties.ErrorMessages, str, ],
                DisplayName: typing.Union[MetaOapg.properties.DisplayName, str, ],
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'additional_properties':
                return super().__new__(
                    cls,
                    *args,
                    ErrorMessages=ErrorMessages,
                    DisplayName=DisplayName,
                    _configuration=_configuration,
                    **kwargs,
                )
    
    def __getitem__(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    def get_item_oapg(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, ],
    ) -> 'CustomLanguages':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
            **kwargs,
        )
