# coding: utf-8

"""
    Qualtrics Survey API

    The Qualtrics Survey endpoints give you access to the structure of the surveys you create.   Surveys have a complex structure, and you are encouraged to become familiar with the structure using your brand's Qualtrics page to build surveys at first. Then you can query those surveys using these endpoints.   Once you are familiar, you can use this API to create surveys on the fly, or modify existing surveys in your library. 

    The version of the OpenAPI document: 3.0.0
    Created by: https://www.qualtrics.com/support/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from qualtrics_survey_python_sdk import schemas  # noqa: F401


class WebServiceFlowElement(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Web service flow element.
    """


    class MetaOapg:
        
        class properties:
            
            
            class Type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "WebService": "WEB_SERVICE",
                    }
                
                @schemas.classproperty
                def WEB_SERVICE(cls):
                    return cls("WebService")
        
            @staticmethod
            def FlowID() -> typing.Type['FlowID']:
                return FlowID
            
            
            class URL(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 1000
                    min_length = 0
            
            
            class Method(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "GET": "GET",
                        "POST": "POST",
                        "PUT": "PUT",
                        "PATCH": "PATCH",
                        "DELETE": "DELETE",
                    }
                
                @schemas.classproperty
                def GET(cls):
                    return cls("GET")
                
                @schemas.classproperty
                def POST(cls):
                    return cls("POST")
                
                @schemas.classproperty
                def PUT(cls):
                    return cls("PUT")
                
                @schemas.classproperty
                def PATCH(cls):
                    return cls("PATCH")
                
                @schemas.classproperty
                def DELETE(cls):
                    return cls("DELETE")
        
            @staticmethod
            def RequestParams() -> typing.Type['KeyValuePairArray']:
                return KeyValuePairArray
        
            @staticmethod
            def EditBodyParams() -> typing.Type['KeyValuePairArray']:
                return KeyValuePairArray
        
            @staticmethod
            def Body() -> typing.Type['KeyValuePairArray']:
                return KeyValuePairArray
            
            
            class ContentType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "application/x-www-form-urlencoded": "XWWWFORMURLENCODED",
                        "application/json": "JSON",
                    }
                
                @schemas.classproperty
                def XWWWFORMURLENCODED(cls):
                    return cls("application/x-www-form-urlencoded")
                
                @schemas.classproperty
                def JSON(cls):
                    return cls("application/json")
        
            @staticmethod
            def Headers() -> typing.Type['KeyValuePairArray']:
                return KeyValuePairArray
        
            @staticmethod
            def ResponseMap() -> typing.Type['KeyValuePairArray']:
                return KeyValuePairArray
            FireAndForget = schemas.BoolSchema
            StringifyValues = schemas.BoolSchema
            __annotations__ = {
                "Type": Type,
                "FlowID": FlowID,
                "URL": URL,
                "Method": Method,
                "RequestParams": RequestParams,
                "EditBodyParams": EditBodyParams,
                "Body": Body,
                "ContentType": ContentType,
                "Headers": Headers,
                "ResponseMap": ResponseMap,
                "FireAndForget": FireAndForget,
                "StringifyValues": StringifyValues,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Type"]) -> MetaOapg.properties.Type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["FlowID"]) -> 'FlowID': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["URL"]) -> MetaOapg.properties.URL: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Method"]) -> MetaOapg.properties.Method: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["RequestParams"]) -> 'KeyValuePairArray': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["EditBodyParams"]) -> 'KeyValuePairArray': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Body"]) -> 'KeyValuePairArray': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ContentType"]) -> MetaOapg.properties.ContentType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Headers"]) -> 'KeyValuePairArray': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ResponseMap"]) -> 'KeyValuePairArray': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["FireAndForget"]) -> MetaOapg.properties.FireAndForget: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["StringifyValues"]) -> MetaOapg.properties.StringifyValues: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["Type", "FlowID", "URL", "Method", "RequestParams", "EditBodyParams", "Body", "ContentType", "Headers", "ResponseMap", "FireAndForget", "StringifyValues", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Type"]) -> typing.Union[MetaOapg.properties.Type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["FlowID"]) -> typing.Union['FlowID', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["URL"]) -> typing.Union[MetaOapg.properties.URL, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Method"]) -> typing.Union[MetaOapg.properties.Method, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["RequestParams"]) -> typing.Union['KeyValuePairArray', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["EditBodyParams"]) -> typing.Union['KeyValuePairArray', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Body"]) -> typing.Union['KeyValuePairArray', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ContentType"]) -> typing.Union[MetaOapg.properties.ContentType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Headers"]) -> typing.Union['KeyValuePairArray', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ResponseMap"]) -> typing.Union['KeyValuePairArray', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["FireAndForget"]) -> typing.Union[MetaOapg.properties.FireAndForget, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["StringifyValues"]) -> typing.Union[MetaOapg.properties.StringifyValues, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["Type", "FlowID", "URL", "Method", "RequestParams", "EditBodyParams", "Body", "ContentType", "Headers", "ResponseMap", "FireAndForget", "StringifyValues", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        Type: typing.Union[MetaOapg.properties.Type, str, schemas.Unset] = schemas.unset,
        FlowID: typing.Union['FlowID', schemas.Unset] = schemas.unset,
        URL: typing.Union[MetaOapg.properties.URL, str, schemas.Unset] = schemas.unset,
        Method: typing.Union[MetaOapg.properties.Method, str, schemas.Unset] = schemas.unset,
        RequestParams: typing.Union['KeyValuePairArray', schemas.Unset] = schemas.unset,
        EditBodyParams: typing.Union['KeyValuePairArray', schemas.Unset] = schemas.unset,
        Body: typing.Union['KeyValuePairArray', schemas.Unset] = schemas.unset,
        ContentType: typing.Union[MetaOapg.properties.ContentType, str, schemas.Unset] = schemas.unset,
        Headers: typing.Union['KeyValuePairArray', schemas.Unset] = schemas.unset,
        ResponseMap: typing.Union['KeyValuePairArray', schemas.Unset] = schemas.unset,
        FireAndForget: typing.Union[MetaOapg.properties.FireAndForget, bool, schemas.Unset] = schemas.unset,
        StringifyValues: typing.Union[MetaOapg.properties.StringifyValues, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'WebServiceFlowElement':
        return super().__new__(
            cls,
            *args,
            Type=Type,
            FlowID=FlowID,
            URL=URL,
            Method=Method,
            RequestParams=RequestParams,
            EditBodyParams=EditBodyParams,
            Body=Body,
            ContentType=ContentType,
            Headers=Headers,
            ResponseMap=ResponseMap,
            FireAndForget=FireAndForget,
            StringifyValues=StringifyValues,
            _configuration=_configuration,
            **kwargs,
        )

from qualtrics_survey_python_sdk.model.flow_id import FlowID
from qualtrics_survey_python_sdk.model.key_value_pair_array import KeyValuePairArray
