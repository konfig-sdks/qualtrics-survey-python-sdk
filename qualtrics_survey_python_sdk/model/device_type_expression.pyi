# coding: utf-8

"""
    Qualtrics Survey API

    The Qualtrics Survey endpoints give you access to the structure of the surveys you create.   Surveys have a complex structure, and you are encouraged to become familiar with the structure using your brand's Qualtrics page to build surveys at first. Then you can query those surveys using these endpoints.   Once you are familiar, you can use this API to create surveys on the fly, or modify existing surveys in your library. 

    The version of the OpenAPI document: 3.0.0
    Created by: https://www.qualtrics.com/support/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from qualtrics_survey_python_sdk import schemas  # noqa: F401


class DeviceTypeExpression(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Logic expression for a Device Type
    """


    class MetaOapg:
        required = {
            "Type",
            "Description",
            "LogicType",
            "LeftOperand",
        }
        
        class properties:
            
            
            class LogicType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def DEVICE_TYPE(cls):
                    return cls("DeviceType")
            
            
            class LeftOperand(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def MOBILE(cls):
                    return cls("mobile")
                
                @schemas.classproperty
                def MOBILE(cls):
                    return cls("Mobile")
                
                @schemas.classproperty
                def BLACKBERRY(cls):
                    return cls("blackberry")
                
                @schemas.classproperty
                def ANDROID(cls):
                    return cls("android")
                
                @schemas.classproperty
                def IPAD(cls):
                    return cls("ipad")
                
                @schemas.classproperty
                def IPHONE(cls):
                    return cls("iphone")
                
                @schemas.classproperty
                def IPOD(cls):
                    return cls("ipod")
                
                @schemas.classproperty
                def OPERA(cls):
                    return cls("opera")
                
                @schemas.classproperty
                def PALM(cls):
                    return cls("palm")
                
                @schemas.classproperty
                def WINDOWS(cls):
                    return cls("windows")
                
                @schemas.classproperty
                def GENERIC(cls):
                    return cls("generic")
            
            
            class Type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def EXPRESSION(cls):
                    return cls("Expression")
            Description = schemas.StrSchema
            
            
            class Operator(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def IS(cls):
                    return cls("Is")
                
                @schemas.classproperty
                def IS_NOT(cls):
                    return cls("IsNot")
            __annotations__ = {
                "LogicType": LogicType,
                "LeftOperand": LeftOperand,
                "Type": Type,
                "Description": Description,
                "Operator": Operator,
            }
        additional_properties = schemas.AnyTypeSchema
    
    Type: MetaOapg.properties.Type
    Description: MetaOapg.properties.Description
    LogicType: MetaOapg.properties.LogicType
    LeftOperand: MetaOapg.properties.LeftOperand
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Type"]) -> MetaOapg.properties.Type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Description"]) -> MetaOapg.properties.Description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["LogicType"]) -> MetaOapg.properties.LogicType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["LeftOperand"]) -> MetaOapg.properties.LeftOperand: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Operator"]) -> MetaOapg.properties.Operator: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["Type"], typing_extensions.Literal["Description"], typing_extensions.Literal["LogicType"], typing_extensions.Literal["LeftOperand"], typing_extensions.Literal["Operator"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Type"]) -> MetaOapg.properties.Type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Description"]) -> MetaOapg.properties.Description: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["LogicType"]) -> MetaOapg.properties.LogicType: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["LeftOperand"]) -> MetaOapg.properties.LeftOperand: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Operator"]) -> typing.Union[MetaOapg.properties.Operator, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["Type"], typing_extensions.Literal["Description"], typing_extensions.Literal["LogicType"], typing_extensions.Literal["LeftOperand"], typing_extensions.Literal["Operator"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        Type: typing.Union[MetaOapg.properties.Type, str, ],
        Description: typing.Union[MetaOapg.properties.Description, str, ],
        LogicType: typing.Union[MetaOapg.properties.LogicType, str, ],
        LeftOperand: typing.Union[MetaOapg.properties.LeftOperand, str, ],
        Operator: typing.Union[MetaOapg.properties.Operator, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'DeviceTypeExpression':
        return super().__new__(
            cls,
            *args,
            Type=Type,
            Description=Description,
            LogicType=LogicType,
            LeftOperand=LeftOperand,
            Operator=Operator,
            _configuration=_configuration,
            **kwargs,
        )
