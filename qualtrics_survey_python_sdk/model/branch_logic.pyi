# coding: utf-8

"""
    Qualtrics Survey API

    The Qualtrics Survey endpoints give you access to the structure of the surveys you create.   Surveys have a complex structure, and you are encouraged to become familiar with the structure using your brand's Qualtrics page to build surveys at first. Then you can query those surveys using these endpoints.   Once you are familiar, you can use this API to create surveys on the fly, or modify existing surveys in your library. 

    The version of the OpenAPI document: 3.0.0
    Created by: https://www.qualtrics.com/support/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from qualtrics_survey_python_sdk import schemas  # noqa: F401


class BranchLogic(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Send respondents down different paths in the survey. See Qualtics Documentation for more information on [Branch Logic](https://www.qualtrics.com/support/survey-platform/survey-module/survey-flow/standard-elements/branch-logic/)
    """


    class MetaOapg:
        required = {
            "Type",
        }
        
        class properties:
            
            
            class Type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def BOOLEAN_EXPRESSION(cls):
                    return cls("BooleanExpression")
            __annotations__ = {
                "Type": Type,
            }
        
        
        class additional_properties(
            schemas.ComposedSchema,
        ):
        
        
            class MetaOapg:
                
                @classmethod
                @functools.lru_cache()
                def one_of(cls):
                    # we need this here to make our import statements work
                    # we must store _composed_schemas in here so the code is only run
                    # when we invoke this method. If we kept this at the class
                    # level we would get an error because the class level
                    # code would be run when this module is imported, and these composed
                    # classes don't exist yet because their module has not finished
                    # loading
                    return [
                        QuestionExpression,
                        EmbeddedDataExpression,
                        DeviceTypeExpression,
                        QuotaExpression,
                        GeoIPExpression,
                        EvaluatorMetadataExpression,
                        PanelDataExpression,
                        LoopAndMergeExpression,
                        RelationshipExpression,
                        SubjectMetadataExpression,
                        OrgHierarchyUnitsExpression,
                        OrgHierarchyMetadataExpression,
                    ]
        
        
            def __new__(
                cls,
                *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'additional_properties':
                return super().__new__(
                    cls,
                    *args,
                    _configuration=_configuration,
                    **kwargs,
                )
    
    Type: MetaOapg.properties.Type
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Type"]) -> MetaOapg.properties.Type: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["Type"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Type"]) -> MetaOapg.properties.Type: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["Type"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        Type: typing.Union[MetaOapg.properties.Type, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'BranchLogic':
        return super().__new__(
            cls,
            *args,
            Type=Type,
            _configuration=_configuration,
            **kwargs,
        )

from qualtrics_survey_python_sdk.model.device_type_expression import DeviceTypeExpression
from qualtrics_survey_python_sdk.model.embedded_data_expression import EmbeddedDataExpression
from qualtrics_survey_python_sdk.model.evaluator_metadata_expression import EvaluatorMetadataExpression
from qualtrics_survey_python_sdk.model.geo_ip_expression import GeoIPExpression
from qualtrics_survey_python_sdk.model.loop_and_merge_expression import LoopAndMergeExpression
from qualtrics_survey_python_sdk.model.org_hierarchy_metadata_expression import OrgHierarchyMetadataExpression
from qualtrics_survey_python_sdk.model.org_hierarchy_units_expression import OrgHierarchyUnitsExpression
from qualtrics_survey_python_sdk.model.panel_data_expression import PanelDataExpression
from qualtrics_survey_python_sdk.model.question_expression import QuestionExpression
from qualtrics_survey_python_sdk.model.quota_expression import QuotaExpression
from qualtrics_survey_python_sdk.model.relationship_expression import RelationshipExpression
from qualtrics_survey_python_sdk.model.subject_metadata_expression import SubjectMetadataExpression
