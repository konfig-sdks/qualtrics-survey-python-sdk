# coding: utf-8

"""
    Qualtrics Survey API

    The Qualtrics Survey endpoints give you access to the structure of the surveys you create.   Surveys have a complex structure, and you are encouraged to become familiar with the structure using your brand's Qualtrics page to build surveys at first. Then you can query those surveys using these endpoints.   Once you are familiar, you can use this API to create surveys on the fly, or modify existing surveys in your library. 

    The version of the OpenAPI document: 3.0.0
    Created by: https://www.qualtrics.com/support/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from qualtrics_survey_python_sdk import schemas  # noqa: F401


class Quota(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Keep track of how many respondents meet a condition in the survey
    """


    class MetaOapg:
        required = {
            "QuotaRealm",
            "Occurrences",
            "ID",
            "Logic",
            "QuotaAction",
            "Name",
        }
        
        class properties:
            Name = schemas.StrSchema
            Occurrences = schemas.IntSchema
            
            
            class Logic(
                schemas.ComposedSchema,
            ):
            
            
                class MetaOapg:
                    
                    
                    class one_of_1(
                        schemas.ListSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            @staticmethod
                            def items() -> typing.Type['LogicObject']:
                                return LogicObject
                    
                        def __new__(
                            cls,
                            arg: typing.Union[typing.Tuple['LogicObject'], typing.List['LogicObject']],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'one_of_1':
                            return super().__new__(
                                cls,
                                arg,
                                _configuration=_configuration,
                            )
                    
                        def __getitem__(self, i: int) -> 'LogicObject':
                            return super().__getitem__(i)
                    
                    @classmethod
                    @functools.lru_cache()
                    def one_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            LogicObject,
                            cls.one_of_1,
                        ]
            
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'Logic':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
        
            @staticmethod
            def QuotaAction() -> typing.Type['QuotaAction']:
                return QuotaAction
        
            @staticmethod
            def ID() -> typing.Type['QuotaID']:
                return QuotaID
            
            
            class QuotaRealm(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def SURVEY(cls):
                    return cls("Survey")
                
                @schemas.classproperty
                def RESPONSE_SET(cls):
                    return cls("ResponseSet")
            Count = schemas.IntSchema
            CountForUndo = schemas.IntSchema
            
            
            class LogicType(
                schemas.ComposedSchema,
            ):
            
            
                class MetaOapg:
                    
                    
                    class one_of_0(
                        schemas.EnumBase,
                        schemas.StrSchema
                    ):
                        
                        @schemas.classproperty
                        def SIMPLE(cls):
                            return cls("Simple")
                        
                        @schemas.classproperty
                        def CROSS(cls):
                            return cls("Cross")
                    
                    @classmethod
                    @functools.lru_cache()
                    def one_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            cls.one_of_0,
                        ]
            
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'LogicType':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class ActionElement(
                schemas.ComposedSchema,
            ):
            
            
                class MetaOapg:
                    any_of_3 = schemas.StrSchema
                    
                    @classmethod
                    @functools.lru_cache()
                    def any_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            SurveyID,
                            QuestionID,
                            BlockID,
                            cls.any_of_3,
                        ]
            
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'ActionElement':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
        
            @staticmethod
            def ActionInfo() -> typing.Type['ActionInfo']:
                return ActionInfo
        
            @staticmethod
            def ActionLogic() -> typing.Type['ActionInfo']:
                return ActionInfo
        
            @staticmethod
            def QuotaSchedule() -> typing.Type['QuotaSchedule']:
                return QuotaSchedule
        
            @staticmethod
            def EndSurveyOptions() -> typing.Type['EndSurveyOptions']:
                return EndSurveyOptions
        
            @staticmethod
            def WebServiceOptions() -> typing.Type['WebServiceOptions']:
                return WebServiceOptions
            
            
            class CrossLogicDef(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['CrossLogicDefEntry']:
                        return CrossLogicDefEntry
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['CrossLogicDefEntry'], typing.List['CrossLogicDefEntry']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'CrossLogicDef':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'CrossLogicDefEntry':
                    return super().__getitem__(i)
            PerformActionOnUser = schemas.BoolSchema
            __annotations__ = {
                "Name": Name,
                "Occurrences": Occurrences,
                "Logic": Logic,
                "QuotaAction": QuotaAction,
                "ID": ID,
                "QuotaRealm": QuotaRealm,
                "Count": Count,
                "CountForUndo": CountForUndo,
                "LogicType": LogicType,
                "ActionElement": ActionElement,
                "ActionInfo": ActionInfo,
                "ActionLogic": ActionLogic,
                "QuotaSchedule": QuotaSchedule,
                "EndSurveyOptions": EndSurveyOptions,
                "WebServiceOptions": WebServiceOptions,
                "CrossLogicDef": CrossLogicDef,
                "PerformActionOnUser": PerformActionOnUser,
            }
    
    QuotaRealm: MetaOapg.properties.QuotaRealm
    Occurrences: MetaOapg.properties.Occurrences
    ID: 'QuotaID'
    Logic: MetaOapg.properties.Logic
    QuotaAction: 'QuotaAction'
    Name: MetaOapg.properties.Name
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Name"]) -> MetaOapg.properties.Name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Occurrences"]) -> MetaOapg.properties.Occurrences: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Logic"]) -> MetaOapg.properties.Logic: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["QuotaAction"]) -> 'QuotaAction': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ID"]) -> 'QuotaID': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["QuotaRealm"]) -> MetaOapg.properties.QuotaRealm: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Count"]) -> MetaOapg.properties.Count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["CountForUndo"]) -> MetaOapg.properties.CountForUndo: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["LogicType"]) -> MetaOapg.properties.LogicType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ActionElement"]) -> MetaOapg.properties.ActionElement: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ActionInfo"]) -> 'ActionInfo': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ActionLogic"]) -> 'ActionInfo': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["QuotaSchedule"]) -> 'QuotaSchedule': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["EndSurveyOptions"]) -> 'EndSurveyOptions': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["WebServiceOptions"]) -> 'WebServiceOptions': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["CrossLogicDef"]) -> MetaOapg.properties.CrossLogicDef: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["PerformActionOnUser"]) -> MetaOapg.properties.PerformActionOnUser: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["Name", "Occurrences", "Logic", "QuotaAction", "ID", "QuotaRealm", "Count", "CountForUndo", "LogicType", "ActionElement", "ActionInfo", "ActionLogic", "QuotaSchedule", "EndSurveyOptions", "WebServiceOptions", "CrossLogicDef", "PerformActionOnUser", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Name"]) -> MetaOapg.properties.Name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Occurrences"]) -> MetaOapg.properties.Occurrences: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Logic"]) -> MetaOapg.properties.Logic: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["QuotaAction"]) -> 'QuotaAction': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ID"]) -> 'QuotaID': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["QuotaRealm"]) -> MetaOapg.properties.QuotaRealm: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Count"]) -> typing.Union[MetaOapg.properties.Count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["CountForUndo"]) -> typing.Union[MetaOapg.properties.CountForUndo, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["LogicType"]) -> typing.Union[MetaOapg.properties.LogicType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ActionElement"]) -> typing.Union[MetaOapg.properties.ActionElement, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ActionInfo"]) -> typing.Union['ActionInfo', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ActionLogic"]) -> typing.Union['ActionInfo', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["QuotaSchedule"]) -> typing.Union['QuotaSchedule', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["EndSurveyOptions"]) -> typing.Union['EndSurveyOptions', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["WebServiceOptions"]) -> typing.Union['WebServiceOptions', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["CrossLogicDef"]) -> typing.Union[MetaOapg.properties.CrossLogicDef, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["PerformActionOnUser"]) -> typing.Union[MetaOapg.properties.PerformActionOnUser, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["Name", "Occurrences", "Logic", "QuotaAction", "ID", "QuotaRealm", "Count", "CountForUndo", "LogicType", "ActionElement", "ActionInfo", "ActionLogic", "QuotaSchedule", "EndSurveyOptions", "WebServiceOptions", "CrossLogicDef", "PerformActionOnUser", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        QuotaRealm: typing.Union[MetaOapg.properties.QuotaRealm, str, ],
        Occurrences: typing.Union[MetaOapg.properties.Occurrences, decimal.Decimal, int, ],
        ID: 'QuotaID',
        Logic: typing.Union[MetaOapg.properties.Logic, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        QuotaAction: 'QuotaAction',
        Name: typing.Union[MetaOapg.properties.Name, str, ],
        Count: typing.Union[MetaOapg.properties.Count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        CountForUndo: typing.Union[MetaOapg.properties.CountForUndo, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        LogicType: typing.Union[MetaOapg.properties.LogicType, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        ActionElement: typing.Union[MetaOapg.properties.ActionElement, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        ActionInfo: typing.Union['ActionInfo', schemas.Unset] = schemas.unset,
        ActionLogic: typing.Union['ActionInfo', schemas.Unset] = schemas.unset,
        QuotaSchedule: typing.Union['QuotaSchedule', schemas.Unset] = schemas.unset,
        EndSurveyOptions: typing.Union['EndSurveyOptions', schemas.Unset] = schemas.unset,
        WebServiceOptions: typing.Union['WebServiceOptions', schemas.Unset] = schemas.unset,
        CrossLogicDef: typing.Union[MetaOapg.properties.CrossLogicDef, list, tuple, schemas.Unset] = schemas.unset,
        PerformActionOnUser: typing.Union[MetaOapg.properties.PerformActionOnUser, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Quota':
        return super().__new__(
            cls,
            *args,
            QuotaRealm=QuotaRealm,
            Occurrences=Occurrences,
            ID=ID,
            Logic=Logic,
            QuotaAction=QuotaAction,
            Name=Name,
            Count=Count,
            CountForUndo=CountForUndo,
            LogicType=LogicType,
            ActionElement=ActionElement,
            ActionInfo=ActionInfo,
            ActionLogic=ActionLogic,
            QuotaSchedule=QuotaSchedule,
            EndSurveyOptions=EndSurveyOptions,
            WebServiceOptions=WebServiceOptions,
            CrossLogicDef=CrossLogicDef,
            PerformActionOnUser=PerformActionOnUser,
            _configuration=_configuration,
            **kwargs,
        )

from qualtrics_survey_python_sdk.model.action_info import ActionInfo
from qualtrics_survey_python_sdk.model.block_id import BlockID
from qualtrics_survey_python_sdk.model.cross_logic_def_entry import CrossLogicDefEntry
from qualtrics_survey_python_sdk.model.end_survey_options import EndSurveyOptions
from qualtrics_survey_python_sdk.model.logic_object import LogicObject
from qualtrics_survey_python_sdk.model.question_id import QuestionID
from qualtrics_survey_python_sdk.model.quota_action import QuotaAction
from qualtrics_survey_python_sdk.model.quota_id import QuotaID
from qualtrics_survey_python_sdk.model.quota_schedule import QuotaSchedule
from qualtrics_survey_python_sdk.model.survey_id import SurveyID
from qualtrics_survey_python_sdk.model.web_service_options import WebServiceOptions
