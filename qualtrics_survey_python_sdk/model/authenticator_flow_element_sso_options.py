# coding: utf-8

"""
    Qualtrics Survey API

    The Qualtrics Survey endpoints give you access to the structure of the surveys you create.   Surveys have a complex structure, and you are encouraged to become familiar with the structure using your brand's Qualtrics page to build surveys at first. Then you can query those surveys using these endpoints.   Once you are familiar, you can use this API to create surveys on the fly, or modify existing surveys in your library. 

    The version of the OpenAPI document: 3.0.0
    Created by: https://www.qualtrics.com/support/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from qualtrics_survey_python_sdk import schemas  # noqa: F401


class AuthenticatorFlowElementSsoOptions(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    SSO options.
    """


    class MetaOapg:
        required = {
            "Type",
        }
        
        class properties:
            
            
            class Type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "Token": "TOKEN",
                        "CAS": "CAS",
                        "LDAP": "LDAP",
                        "LTI": "LTI",
                        "Shibboleth": "SHIBBOLETH",
                        "UseBrandSettings": "USE_BRAND_SETTINGS",
                        "GoogleOpenID": "GOOGLE_OPEN_ID",
                        "Facebook": "FACEBOOK",
                    }
                
                @schemas.classproperty
                def TOKEN(cls):
                    return cls("Token")
                
                @schemas.classproperty
                def CAS(cls):
                    return cls("CAS")
                
                @schemas.classproperty
                def LDAP(cls):
                    return cls("LDAP")
                
                @schemas.classproperty
                def LTI(cls):
                    return cls("LTI")
                
                @schemas.classproperty
                def SHIBBOLETH(cls):
                    return cls("Shibboleth")
                
                @schemas.classproperty
                def USE_BRAND_SETTINGS(cls):
                    return cls("UseBrandSettings")
                
                @schemas.classproperty
                def GOOGLE_OPEN_ID(cls):
                    return cls("GoogleOpenID")
                
                @schemas.classproperty
                def FACEBOOK(cls):
                    return cls("Facebook")
            
            
            class CaptureRespondentInfo(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "true": "TRUE",
                        "false": "FALSE",
                    }
                
                @schemas.classproperty
                def TRUE(cls):
                    return cls("true")
                
                @schemas.classproperty
                def FALSE(cls):
                    return cls("false")
        
            @staticmethod
            def cas() -> typing.Type['AuthenticatorFlowElementSsoOptionsCas']:
                return AuthenticatorFlowElementSsoOptionsCas
        
            @staticmethod
            def ldap() -> typing.Type['AuthenticatorFlowElementSsoOptionsLdap']:
                return AuthenticatorFlowElementSsoOptionsLdap
        
            @staticmethod
            def respondentMap() -> typing.Type['AuthenticatorFlowElementSsoOptionsRespondentMap']:
                return AuthenticatorFlowElementSsoOptionsRespondentMap
        
            @staticmethod
            def token() -> typing.Type['AuthenticatorFlowElementSsoOptionsToken']:
                return AuthenticatorFlowElementSsoOptionsToken
            
            
            class UsePanel(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "true": "TRUE",
                        "false": "FALSE",
                    }
                
                @schemas.classproperty
                def TRUE(cls):
                    return cls("true")
                
                @schemas.classproperty
                def FALSE(cls):
                    return cls("false")
            
            
            class UsePerson(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "true": "TRUE",
                        "false": "FALSE",
                    }
                
                @schemas.classproperty
                def TRUE(cls):
                    return cls("true")
                
                @schemas.classproperty
                def FALSE(cls):
                    return cls("false")
            
            
            class UseSSO(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "true": "TRUE",
                        "false": "FALSE",
                    }
                
                @schemas.classproperty
                def TRUE(cls):
                    return cls("true")
                
                @schemas.classproperty
                def FALSE(cls):
                    return cls("false")
            __annotations__ = {
                "Type": Type,
                "CaptureRespondentInfo": CaptureRespondentInfo,
                "cas": cas,
                "ldap": ldap,
                "respondentMap": respondentMap,
                "token": token,
                "UsePanel": UsePanel,
                "UsePerson": UsePerson,
                "UseSSO": UseSSO,
            }
        additional_properties = schemas.AnyTypeSchema
    
    Type: MetaOapg.properties.Type
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Type"]) -> MetaOapg.properties.Type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["CaptureRespondentInfo"]) -> MetaOapg.properties.CaptureRespondentInfo: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cas"]) -> 'AuthenticatorFlowElementSsoOptionsCas': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ldap"]) -> 'AuthenticatorFlowElementSsoOptionsLdap': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["respondentMap"]) -> 'AuthenticatorFlowElementSsoOptionsRespondentMap': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["token"]) -> 'AuthenticatorFlowElementSsoOptionsToken': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["UsePanel"]) -> MetaOapg.properties.UsePanel: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["UsePerson"]) -> MetaOapg.properties.UsePerson: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["UseSSO"]) -> MetaOapg.properties.UseSSO: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["Type"], typing_extensions.Literal["CaptureRespondentInfo"], typing_extensions.Literal["cas"], typing_extensions.Literal["ldap"], typing_extensions.Literal["respondentMap"], typing_extensions.Literal["token"], typing_extensions.Literal["UsePanel"], typing_extensions.Literal["UsePerson"], typing_extensions.Literal["UseSSO"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Type"]) -> MetaOapg.properties.Type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["CaptureRespondentInfo"]) -> typing.Union[MetaOapg.properties.CaptureRespondentInfo, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cas"]) -> typing.Union['AuthenticatorFlowElementSsoOptionsCas', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ldap"]) -> typing.Union['AuthenticatorFlowElementSsoOptionsLdap', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["respondentMap"]) -> typing.Union['AuthenticatorFlowElementSsoOptionsRespondentMap', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["token"]) -> typing.Union['AuthenticatorFlowElementSsoOptionsToken', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["UsePanel"]) -> typing.Union[MetaOapg.properties.UsePanel, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["UsePerson"]) -> typing.Union[MetaOapg.properties.UsePerson, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["UseSSO"]) -> typing.Union[MetaOapg.properties.UseSSO, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["Type"], typing_extensions.Literal["CaptureRespondentInfo"], typing_extensions.Literal["cas"], typing_extensions.Literal["ldap"], typing_extensions.Literal["respondentMap"], typing_extensions.Literal["token"], typing_extensions.Literal["UsePanel"], typing_extensions.Literal["UsePerson"], typing_extensions.Literal["UseSSO"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        Type: typing.Union[MetaOapg.properties.Type, str, ],
        CaptureRespondentInfo: typing.Union[MetaOapg.properties.CaptureRespondentInfo, str, schemas.Unset] = schemas.unset,
        cas: typing.Union['AuthenticatorFlowElementSsoOptionsCas', schemas.Unset] = schemas.unset,
        ldap: typing.Union['AuthenticatorFlowElementSsoOptionsLdap', schemas.Unset] = schemas.unset,
        respondentMap: typing.Union['AuthenticatorFlowElementSsoOptionsRespondentMap', schemas.Unset] = schemas.unset,
        token: typing.Union['AuthenticatorFlowElementSsoOptionsToken', schemas.Unset] = schemas.unset,
        UsePanel: typing.Union[MetaOapg.properties.UsePanel, str, schemas.Unset] = schemas.unset,
        UsePerson: typing.Union[MetaOapg.properties.UsePerson, str, schemas.Unset] = schemas.unset,
        UseSSO: typing.Union[MetaOapg.properties.UseSSO, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'AuthenticatorFlowElementSsoOptions':
        return super().__new__(
            cls,
            *args,
            Type=Type,
            CaptureRespondentInfo=CaptureRespondentInfo,
            cas=cas,
            ldap=ldap,
            respondentMap=respondentMap,
            token=token,
            UsePanel=UsePanel,
            UsePerson=UsePerson,
            UseSSO=UseSSO,
            _configuration=_configuration,
            **kwargs,
        )

from qualtrics_survey_python_sdk.model.authenticator_flow_element_sso_options_cas import AuthenticatorFlowElementSsoOptionsCas
from qualtrics_survey_python_sdk.model.authenticator_flow_element_sso_options_ldap import AuthenticatorFlowElementSsoOptionsLdap
from qualtrics_survey_python_sdk.model.authenticator_flow_element_sso_options_respondent_map import AuthenticatorFlowElementSsoOptionsRespondentMap
from qualtrics_survey_python_sdk.model.authenticator_flow_element_sso_options_token import AuthenticatorFlowElementSsoOptionsToken
